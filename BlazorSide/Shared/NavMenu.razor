@using BlazorLoginApp.Authentication
@using BlazorSide.Pages.GuardView
@using BlazorSide.UIComponents
@using Entities
@using System.Security.Claims
@using Contracts
@using Microsoft.AspNetCore.SignalR
@using StateContainer
@inject IAuthService authService
@inject IModalService _modalService
@inject NavigationManager navMgr
@inject IUserService _userService
@inject AlertStateContainer alertStateContainer
@implements IDisposable
<nav
       id="main-navbar"
       class="navbar navbar-expand-lg navbar-light bg-white fixed-top"
       >
    <!-- Container wrapper -->
    <div class="container-fluid">
      <!-- Toggle button -->
      <button
              class="navbar-toggler"
              type="button"
              data-mdb-toggle="collapse"
              data-mdb-target="#sidebarMenu"
              aria-controls="sidebarMenu"
              aria-expanded="false"
              aria-label="Toggle navigation">
        <i class="fas fa-bars"></i>
      </button>

      
      <span class="nav-item me-3 me-lg-0 my-auto">
                <a class="nav-link" @onclick="Logout" style="cursor: pointer;" >
                  <i class="bi bi-box-arrow-in-left" ></i>
                </a>
        </span>
      <!-- Brand -->
            <a class="navbar-brand " id="logo" href="/">
              <img
                src="img/logo.png"
                   height="100"
                   alt=""
                   loading="lazy"/>
            </a>

      <!-- Right links -->
      <ul class="navbar-nav ms-0 d-flex flex-row" style="margin-right: 10px">
        <!-- Notification dropdown -->
        <AuthorizeView Policy="GuardAccess">
        @if (elapsedTime <= notificationDuration)
        {
          <li class="nav-item dropdown">
            <a
              class="nav-link me-3 me-lg-0 dropdown-toggle hidden-arrow"
              id="navbarDropdownMenuLink"
              role="button"
              data-mdb-toggle="dropdown"
              aria-expanded="false">
              <i class="fas fa-bell"></i>

              <span class="badge rounded-pill badge-notification bg-danger">Alert!</span>

              
            </a>
            <ul
              class="dropdown-menu dropdown-menu-start"
              aria-labelledby="navbarDropdownMenuLink">
              <li><a class="dropdown-item" @onclick="ShowAlert">@Alert.Text</a></li>
            </ul>
          </li>
        }
        else
        {
        TimerDone?.Invoke();
        }
        <li class="nav-item me-3 me-lg-0">
          <a class="nav-link" onclick="@GoToProfile">
            <i class="fa solid fa-user" style="cursor: pointer;"></i>
          </a>
        </li>
        </AuthorizeView>
        <!-- Avatar -->
        <li class="nav-item me-3 me-lg-0">
          <a class="nav-link" href="#">
            <i class="fab fa-github"></i>
          </a>
          </li>
      </ul>
    </div>
    <!-- Container wrapper -->
  </nav>
  <!-- Navbar -->


@code {
  [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private ClaimsPrincipal? user;
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private static Timer? timer;
    private Alert? Alert { get; set; }
    private int elapsedTime=0;
    private int? notificationDuration;
    public string text { get; set; }
    public event Action? TimerDone;
    protected override async Task OnInitializedAsync()
    {
      AuthenticationState authState = await AuthState;
      user = authState.User;
      Claim userName = user.Claims.First(c => c.Type.Equals("UserName"));
      User? u = await _userService.GetUserAsync(userName.Value);
      if (u.Role.Equals("guard"))
      {
        alertStateContainer.OnChange += ReceiveNotifications;
        TimerDone += StopTimer;
      }
    }

  private void ReceiveNotifications()
  {
    Alert = alertStateContainer.Property;
    StartTimer();
    text = Alert.Text;
    notificationDuration = Alert.DurationInMinutes;
  }

  private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async Task Logout()
    {
      
      var parameters = new ModalParameters();
      parameters.Add(nameof(ActionConfirm.Message), "Are you sure you want to log out?");
      var modal=_modalService.Show<ActionConfirm>("Log Out",parameters);
      var result = await modal.Result;
      if (result.Cancelled)
      {
        return;
      }
      await authService.LogoutAsync();
      navMgr.NavigateTo("/");
    }

    private async Task GoToProfile()
    {
      try
      {
        AuthenticationState authState = await AuthState;
        if (authState.User.Identity == null) return;
        ClaimsPrincipal user = authState.User;
        Claim userName = user.Claims.First(c => c.Type.Equals("UserName"));
        User? u = await _userService.GetUserAsync(userName.Value);
        navMgr.NavigateTo("/GuardProfile/" + u.Id);
      }
      catch (Exception e)
      {
        var paramet = new ModalParameters();
        paramet.Add(nameof(ErrorModal.Message),e.Message);
        _modalService.Show<ErrorModal>("Error",paramet);
      }
    }
    public  void StartTimer()
    {
      elapsedTime = 0;
      timer = new Timer( _ =>
      {
         InvokeAsync(StateHasChanged);
        elapsedTime++;
        Console.WriteLine(elapsedTime);
      }, null, 0, 1000);
    }

    public void StopTimer()
    {
       timer?.DisposeAsync();
      timer = null;
    }

    public void Dispose()
    {
      timer?.Dispose();
    }

  public void ShowAlert()
  {
    var parameters = new ModalParameters();
    parameters.Add(nameof(AlertModal.Message),Alert?.Text);
    parameters.Add(nameof(AlertModal.dateTime),Alert?.DateTime);
    parameters.Add(nameof(AlertModal.duration),Alert?.DurationInMinutes);
    _modalService.Show<AlertModal>("Alert", parameters);
  }
}