@page "/WorkshiftsOverview"
@using Entities
@using Contracts
@using BlazorSide.UIComponents
@inject NavigationManager _navMgr
@inject IWorkShiftService workShiftService
@inject IModalService modalService
@attribute [Authorize(Policy = "WardenAccess")]

<div class="row  mt-5">
    <div class="d-flex flex-column col-md-7 align-items-center">
         <div class="card text-center overflow-y-scroll" style="height: 30rem;">
                    <h5 class="card-header bg-info text-white" >Workshifts Overview</h5>
        <table class="table table-hover align-middle mb-0 bg-white">
            <thead class="bg-info sticky-top">
            <tr class="text-uppercase text-white">
                <th scope="col">Shift ID</th>
                <th scope="col">Days of the week</th>
                <th scope="col">Start</th>
                <th scope="col">End</th>
                <th scope="col">Sector</th>
                <th scope="col">Guards</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>

            <tbody>
            @foreach (var w in workShifts!)
            {
                <tr>

                    <td>
                        <div class="d-flex align-items-center">
                            <div class="ms-3">
                                <p class="fw-bold mb-1">@w.Id</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="ms-3">
                                <p class=" mb-1">@w.DaysOfWeek</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="ms-3">
                                <p class=" mb-1">@w.Start</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="ms-3">
                                <p class=" mb-1">@w.End</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="ms-3">
                                <p class=" mb-1">@w.Sector.Id</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="ms-3">
                                <p class=" mb-1">
                                    @foreach (var guard in w.Guards)
                                    {
                                        string temp = $"{guard.FirstName} {guard.LastName} " + Environment.NewLine;
                                        @temp
                                    }
                                </p>
                            </div>
                        </div>
                    </td>

                    <td>
                        <a @onclick="@(() => { _navMgr.NavigateTo("/WorkshiftDetails/" + w.Id); })">
                            <button
                                type="button"
                                class="btn btn-link btn-rounded btn-sm fw-bold"
                                data-mdb-ripple-color="dark">
                                Edit
                            </button>
                        </a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    @if (workShifts == null && !workShifts.Any())
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    </div>
</div>

@if (!string.IsNullOrEmpty(errorLabel))
{
    <label style="color: red">Error: @errorLabel</label>
}

@code {
    private ICollection<WorkShift>? workShifts;
    private string errorLabel = String.Empty;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            workShifts = await workShiftService.GetWorkShifts();
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            modalService.Show<ErrorModal>("Error",paramet);
        }
        
    }

}