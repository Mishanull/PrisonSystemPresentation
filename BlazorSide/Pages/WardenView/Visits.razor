@page "/Visits"
@using Entities
@using Contracts
@using BlazorSide.UIComponents
@using System.Globalization
@using Microsoft.AspNetCore.Components.Server
@inject IVisitService visitService
@inject IModalService modalService
@inject IPrisonerService prisonerService
@inject NavigationManager navMgr
<div class=" flex-row mt-5 justify-content-center">
    @if (VisitsList == null || !VisitsList!.Any())
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    else
    {
        <div class="d-flex flex-row mb-3 justify-content-center  ">
            <div class="p-2">
                <SfDropDownList TValue="OptionsValues" @onselectionchange="OnDropdownSelected" TItem="string" Placeholder="Select status" @bind-Value="@currentOption" DataSource="@(Options)">
                    <DropDownListEvents TItem="string" TValue="OptionsValues" ValueChange="@OnDropdownSelected"></DropDownListEvents>
                </SfDropDownList>
            </div>
            <div class="p-2">
                <input class="form-control" type="text" placeholder="Filter..."
                       @bind="Filter"
                       @bind:event="oninput">
            </div>
        </div>
        <div class="d-flex flex-column col-md-7 align-items-center">
            <div class="card text-center overflow-y-scroll" style="height: 30rem;">
                <h5 class="card-header bg-info text-white">An Overview of Visit Requests</h5>
                <table class="table table-hover  align-middle bg-white " style="position: relative; ">
                    <thead class="bg-info sticky-top">
                    <tr class="text-uppercase text-white ">
                        <th scope="col">Visitor Name </th>
                        <th scope="col">Date</th>
                        <th scope="col">Time</th>
                        <th scope="col">Status</th>
                        <th scope="col"></th>
                    </tr>
                    </thead>
                    <tbody>

                    @for (int i = VisitsList.ToList().Count - 1; i >= 0; i--)
                    {
                        if (!IsVisible(VisitsList.ToList()[i]))
                            continue;
                        Visit? visit = VisitsList.ToList()[i];
                        @if (selectedVisit != null && selectedVisit!.Equals(visit))
                        {
                            <tr class="table-active">
                                <td >@visit.FirstName @visit.LastName
                                </td>
                                <td >@visit.VisitDate.Day/@visit.VisitDate.Month/@visit.VisitDate.Year</td>
                                <td >@visit.VisitDate.TimeOfDay.ToString(@"hh\:mm")</td>
                                <td>
                                    @switch (visit.Status)
                                    {
                                        case Status.Approved:
                                            <span class="badge rounded-pill badge-primary" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                        case Status.Denied:
                                            <span class="badge rounded-pill badge-danger" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                        case Status.Waiting:
                                            <span class="badge rounded-pill badge-warning" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                        case Status.Fulfilled:
                                            <span class="badge rounded-pill badge-success" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                    }

                                </td>
                                <td><button class="btn btn-outline-info" @onclick=@(() => SeeMore(visit))>See more</button></td>
                            </tr>
                        }
                        else
                        {
                            <tr >
                                <td >@visit.FirstName @visit.LastName
                                </td>
                                <td >@visit.VisitDate.Day/@visit.VisitDate.Month/@visit.VisitDate.Year</td>
                                <td >@visit.VisitDate.TimeOfDay.ToString(@"hh\:mm")</td>
                                <td>
                                    @switch (visit.Status)
                                    {
                                        case Status.Approved:
                                            <span class="badge rounded-pill badge-primary" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                        case Status.Denied:
                                            <span class="badge rounded-pill badge-danger" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                        case Status.Waiting:
                                            <span class="badge rounded-pill badge-warning" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                        case Status.Fulfilled:
                                            <span class="badge rounded-pill badge-success" style="margin-left: 2px">@visit.Status</span>
                                            break;
                                    }

                                </td>
                                <td><button class="btn btn-outline-info" @onclick=@(() => SeeMore(visit))>See more</button></td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
            <br/>
                <nav>
                    <ul class="pagination ">
                        @for (int i = 0; i < noOfPages; i++)
                        {
                            int page = i;
                            @if (selectedPage == page + 1)
                            {
    
                                <li class="page-item active ms-3" aria-current="page" style="cursor: pointer; background-color:  #41B3D3 !important;">
                                    <a class="page-link" @onclick=@(() => SelectPage(page + 1))>
                                        @(i + 1)
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item  ms-3" aria-current="page" style="cursor: pointer;">
                                    <a class="page-link" @onclick=@(() => SelectPage(page + 1))>
                                        @(i + 1)
                                    </a>
                                </li>
                            }
                        }
                    </ul>
                </nav>
                <div class="p-2 ">
                    <div class=" dropup">
                        <button
                            class="btn btn-info dropdown-toggle"
                            type="button"
                            id="dropdownMenuButton"
                            data-mdb-toggle="dropdown"
                            aria-expanded="false">
                            Rows/page: @PageSize
                        </button>
                        <ul class="dropdown-menu  " aria-labelledby="dropdownMenuButton" style="z-index: 999;">
                            <li><a class="dropdown-item" @onclick=@(() => SetPageSize(10))>10</a></li>
                            <li><a class="dropdown-item" @onclick=@(() => SetPageSize(15))>15</a></li>
                            <li><a class="dropdown-item" @onclick=@(() => SetPageSize(20))>20</a></li>
                            <li><a class="dropdown-item" @onclick=@(() => SetPageSize(25))>25</a></li>
                        </ul>
                    </div>
                </div>
        </div>
        @if (isSelected && currentPrisonerInVisit!=null)
    {
        long id = currentPrisonerInVisit.Id;
        <div class="col-md-4">
            <div class="card ">
                <h5 class="card-header bg-info text-white">Selected Visit</h5>
                <div class="card-body font-normal">
                    <h6>Visitor's Name: @selectedVisit!.FirstName @selectedVisit.LastName</h6>
                    <h6>Email: @selectedVisit.Email</h6>
                    <h6>Desired date for visit: @selectedVisit.VisitDate.Day/@selectedVisit.VisitDate.Month/@selectedVisit.VisitDate.Year</h6>
                    <h6>Desired time for visit: @selectedVisit.VisitDate.TimeOfDay.ToString(@"hh\:mm")</h6>
                    <h6>Prisoner to be visited: <a style="cursor: pointer; text-decoration: underline;"@onclick=@(() => GoToPrisoner(id))>@currentPrisonerInVisit!.FirstName @currentPrisonerInVisit.LastName </a></h6>
                    <br/>
                    @if (selectedVisit.Status == Status.Waiting)
                    {
                        <button class="btn btn-info" @onclick="Approve">Approve Visit</button>
                        <button class="btn btn-danger" @onclick="Deny">Deny Visit</button>
                    }
                    else
                    {
                        @switch (selectedVisit.Status)
                        {
                            case Status.Approved:
                                <h6>Status: <span class="badge rounded-pill badge-primary" style="margin-left: 2px">@selectedVisit.Status</span></h6>
                                break;
                             case Status.Denied:
                                 <h6>Status: <span class="badge rounded-pill badge-danger" style="margin-left: 2px">@selectedVisit.Status</span></h6>
                                 break;
                            case Status.Fulfilled:
                                <h6>Status:<span class="badge rounded-pill badge-success" style="margin-left: 2px">@selectedVisit.Status</span></h6>
                                break;
                        }
                        
                    }
                </div>
            </div>
        </div>
    }
    }
</div>
        
    
@code {
    private OptionsValues currentOption { get; set; }=OptionsValues.All;
    private ICollection<Visit>? VisitsList { get; set; }
    private bool isSelected;
    private Visit? selectedVisit { get; set; } = null;
    private Prisoner? currentPrisonerInVisit;
    private string Filter { get; set; }
    
    [CascadingParameter]
    private IModalService Modal { get; set; }
    
    private int PageSize { get; set; } = 10;
    private int TotalNumberOfVisits { get; set; }
    private int noOfPages { get; set; }
    private int selectedPage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        selectedPage = 1;
        VisitsList = await visitService.GetVisitsAsync(selectedPage, PageSize);
        TotalNumberOfVisits = VisitsList!.Count;
        if (TotalNumberOfVisits < 10) noOfPages = 0;
        else noOfPages = TotalNumberOfVisits / PageSize +1;
    }

    public async void SeeMore(Visit v)
    {
        try
        {
            isSelected = true;
            selectedVisit = v;
            currentPrisonerInVisit = await prisonerService.GetPrisonerBySSN(v.PrisonerSsn.ToString());
        }
        catch (Exception e)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ErrorModal.Message),e.Message);
            modalService.Show<ErrorModal>("Error",parameters);
        }
    }

    public async Task Approve()
    {
        try
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ActionConfirm.Message),"Are you sure that you want to approve this visit?");
            var modalRef=modalService.Show<ActionConfirm>("Confirm",parameters);
            var result = await modalRef.Result;
            if (!result.Cancelled)
            {
                await visitService.UpdateVisitStatusAsync(selectedVisit!.Id, Status.Approved);
                VisitsList = await visitService.GetVisitsAsync(selectedPage, PageSize);
                await InvokeAsync(StateHasChanged);
                selectedVisit = null;
                isSelected = false;
            }
            modalRef.Close(result);
        }
        catch (Exception e)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ErrorModal.Message),e.Message);
            modalService.Show<ErrorModal>("Error",parameters);
        }
    }

    public void GoToPrisoner(long id)
    {
        navMgr.NavigateTo($"/PrisonerDetail/{id}");
    }
    public async Task Deny()
    {
        try
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ActionConfirm.Message),"Are you sure that you want to deny this visit?");
            var modalRef=modalService.Show<ActionConfirm>("Confirm",parameters);
            var result = await modalRef.Result;
            if (!result.Cancelled)
            { 
                await visitService.UpdateVisitStatusAsync(selectedVisit!.Id, Status.Denied);
                VisitsList = await visitService.GetVisitsAsync(selectedPage, PageSize);
                await InvokeAsync(StateHasChanged);
                selectedVisit = null;
                isSelected = false;
            }
            modalRef.Close(result);
        }
        catch (Exception e)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ErrorModal.Message),e.Message);
            modalService.Show<ErrorModal>();
        }
    }
    
    public string[] Options = Enum.GetNames(typeof(OptionsValues));

    public enum OptionsValues
    {
        All,
        Waiting,
        Denied,
        Approved,
        Fulfilled
    }
    
    private void OnDropdownSelected()
    {
        Console.WriteLine(currentOption);
    }
    
    private bool IsVisible(Visit visit)
    {
        if ( CheckFilter(visit) && currentOption.ToString().Equals("All"))
            return true;
 
        if (CheckFilter(visit) && currentOption.ToString().Equals(visit.Status.ToString()))
            return true;

        return false;
    }

    private bool CheckFilter(Visit visit )
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
 
        if (visit.FirstName.Contains(Filter, StringComparison.OrdinalIgnoreCase) 
            || visit.LastName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
 
        if (visit.PrisonerSsn.ToString().StartsWith(Filter))
            return true;

        return false;
        
    }

    private async Task SelectPage(int i)
    {
        selectedPage = i;
        VisitsList = await visitService.GetVisitsAsync(selectedPage,PageSize);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetPageSize(int i)
    {
        PageSize = i;
        noOfPages = TotalNumberOfVisits / PageSize + 1;
        VisitsList = await visitService.GetVisitsAsync(selectedPage,PageSize);
        await InvokeAsync(StateHasChanged);
    }


}