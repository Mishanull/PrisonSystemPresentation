@using Entities
@using Contracts
@using StateContainer
@using BlazorSide.UIComponents
@page "/Alert"
@inject IAlertService _alertService
@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@inject IModalService _modalService
<div class="row mt-5">
    <div class="col-md-4">
        <div class="card ">
            <h5 class="card-header bg-grey text-warning">Alert</h5>
            <div class="card-body">
                <h5 class="card-title ">Broadcast an alert to all guards</h5>

                <input @bind="text" class="form-control " type="text"/>
                    <br/>
                    <button class="btn btn-warning" @onclick="SendAlert">Send Alert</button>
            </div>
        </div>
    </div>
    <div class="d-flex flex-column col-md-7 align-items-center">
            <div class="card text-center ">
                <h5 class="card-header bg-grey text-warning">Sent Alerts</h5>
                <div class="card-body">
                    <table class="table align-middle bg-white ">
                        <thead class="bg-warning">
                        <tr>
                            <th scope="col">Date </th>
                            <th scope="col">Time</th>
                            <th scope="col">Duration</th>
                            <th scope="col">Details</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td >12-05-2029</td>
                            <td >14:25</td>
                            <td >00:25:00</td>
                            <td><button class="btn btn-outline-warning">See more</button></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
</div>
@code {
    private Entities.Alert alert = new Entities.Alert();
    private string? text { get; set; }
    protected override async Task OnInitializedAsync()
    {
        stateContainer.OnChange += OnAlertSent;
    }

    private void OnAlertSent()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AlertModal.Message),"Alert sent succesfully");
        var modalReference = _modalService.Show<AlertModal>("Alert", parameters);
        if(modalReference.Result.IsCompleted){text=String.Empty;  }
        
    }

    public async Task SendAlert()
    {
        alert.priority = Entities.Alert.Priority.Low;
        alert.dateTime = new DateTime(2022, 10, 21);
        alert.text = text;
       await _alertService.SendAlert(alert);
              
    }
}