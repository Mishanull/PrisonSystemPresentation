@using Entities
@using Contracts
@using StateContainer
@using BlazorSide.UIComponents
@page "/AlertsOverview"
@inject IAlertService _alertService
@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@inject IModalService _modalService
@attribute [Authorize(Policy = "WardenAccess")]
@implements IDisposable 
<div class="row mt-5">
    <div class="col-md-4">
        <div class="card ">
            <h5 class="card-header bg-grey text-warning">Alert</h5>
            <div class="card-body">
                <h5 class="card-title ">Broadcast an alert to all guards</h5>

                <textarea @bind="text" class="form-control " type="text" required></textarea>
                <label >Duration In Minutes: </label>
                <input @bind="duration" class="form-control " type="number" required/>
                    <br/>
                    <button class="btn btn-warning" @onclick="SendAlert">Send Alert</button>
            </div>
        </div>
    </div>
    <div class="d-flex flex-column col-md-7 align-items-center" >
            <div class="card text-center overflow-y-scroll " style="height: 30rem;">
                <h5 class="card-header bg-grey text-warning">Recently Sent Alerts</h5>
                    <table class="table table-hover align-middle bg-white "  style="position: relative; height: 15rem">
                        <thead class="bg-warning sticky-top">
                        <tr>
                            <th scope="col">Date </th>
                            <th scope="col">Time</th>
                            <th scope="col">Duration (minutes)</th>
                            <th scope="col">Details</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (! alerts.Any() )
                        {
                            <div class="spinner-border text-info" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            @for (int i=alerts.ToList().Count-1; i>=0;i--)
                            {
                                Alert? alert = alerts.ToList()[i];
                                <tr>
                                    <td >@alert.DateTime.Day/@alert.DateTime.Month/@alert.DateTime.Year</td>
                                    <td >@alert.DateTime.TimeOfDay.ToString(@"hh\:mm") 
                                        @if (isActive(alert))
                                        {
                                            <br/>
                                            <span class="badge rounded-pill badge-warning" style="margin-left: 2px">Active</span>
                                        }
                                    </td>
                                    <td >@alert.DurationInMinutes</td>
                                    <td><button class="btn btn-outline-warning" @onclick=@(() => SeeMore(alert))>See more</button></td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                    
            </div>
        </div>
</div>
@code {
    private Entities.Alert alert = new Entities.Alert();
    private string? text { get; set; }
    private ICollection<Entities.Alert> alerts;
    private int duration;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            alerts = await _alertService.GetAlerts();
            stateContainer.OnChange += OnAlertSent;
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private void OnAlertSent()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(MessageModal.Message),"Alert sent succesfully! Be aware that you will not be able to send another alert until this one finishes");
        parameters.Add(nameof(MessageModal.OkButton),"Ok");
        var modalReference = _modalService.Show<MessageModal>("Alert", parameters);
        if(modalReference.Result.IsCompleted){text=String.Empty;  }
        
    }
    
    public async Task SendAlert()
    {
        try
        {
            alert.Priority = Priority.Low;
            alert.DateTime = DateTime.Now;
            alert.Text = text;
            alert.DurationInMinutes = duration;
            await _alertService.SendAlert(alert);
            alerts = await _alertService.GetAlerts();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }
    public void SeeMore(Alert alert)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AlertModal.Message),alert.Text);
        parameters.Add(nameof(AlertModal.dateTime),alert.DateTime);
        parameters.Add(nameof(AlertModal.duration),alert.DurationInMinutes);
        _modalService.Show<AlertModal>("Alert", parameters);
    }

    public bool isActive(Alert alert)
    {
        double totalSeconds = alert.DurationInMinutes;
        TimeSpan finishTime=TimeSpan.FromSeconds(totalSeconds);
        DateTime finishDate = alert.DateTime.Add(finishTime);
        if (DateTime.Compare(finishDate, DateTime.Now) == -1 )
        {
            return false;
        }
        return true;

    }

    public void Dispose()
    {
        stateContainer.OnChange -= OnAlertSent;
    }
}