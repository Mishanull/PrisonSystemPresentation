@page "/AlertsOverview"

@using Entities
@using Contracts
@using BlazorSide.UIComponents

@inject IAlertService alertService
@inject IModalService _modalService

@attribute [Authorize(Policy = "WardenAccess")]

<div class="row mt-5">
    @if (_alerts == null || !_alerts!.Any())
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div class="col-md-4">
            <div class="card ">
                <h5 class="card-header bg-grey text-warning">Alert</h5>
                <div class="card-body">
                    <h5 class="card-title ">Broadcast an alert </h5>
                    <textarea @bind="_text" class="form-control " type="text" required></textarea>
                    <label >Duration In Minutes: </label>
                    <input @bind="_duration" class="form-control " type="number" min="1"  required/>
                    <br/>
                    <label >Send to : </label>
                    <br/>
                    <br/>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="_sector1" id="flexCheck1"/>
                        <label class="form-check-label" for="flexCheck1">Sector 1</label>
                    </div>
                    <br/>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="_sector2" id="flexCheck2"/>
                        <label class="form-check-label" for="flexCheck2">Sector 2</label>
                    </div>
                    <br/>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="_sector3" id="flexCheck3"/>
                        <label class="form-check-label" for="flexCheck3">Sector 3</label>
                    </div>
                    <br/>
                    <button class="btn btn-warning"  @onclick="SendAlert">Send Alert</button>
                </div>
            </div>
        </div>
        <div class="d-flex flex-column col-md-7 align-items-center">
            <div class="card text-center overflow-y-scroll " style="height: 30rem;">
                <h5 class="card-header bg-grey text-warning">All alerts (Descending order by date)</h5>
                <table class="table table-hover align-middle bg-white " style="position: relative; height: 15rem">
                    <thead class="bg-warning sticky-top">
                    <tr>
                        <th scope="col">Date </th>
                        <th scope="col">Time</th>
                        <th scope="col">Sector(s)</th>
                        <th scope="col">Duration (minutes)</th>
                        <th scope="col">Details</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (!_alerts.Any())
                    {
                        <div class="spinner-border text-info" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        @for (int i = _alerts.ToList().Count - 1; i >= 0; i--)
                        {
                            Alert? alert = _alerts.ToList()[i];
                            <tr>
                                <td >@alert.DateTime.Day/@alert.DateTime.Month/@alert.DateTime.Year</td>
                                <td >@alert.DateTime.TimeOfDay.ToString(@"hh\:mm")
                                    @if (IsActive(alert))
                                    {
                                        <br/>
                                        <span class="badge rounded-pill badge-warning" style="margin-left: 2px">Active</span>
                                    }
                                </td>
                                <td>
                                    @if (alert.Sectors[0])
                                    {
                                        <span> 1 </span>
                                    } 
                                    @if (alert.Sectors[1])
                                    {
                                        <span> 2 </span>
                                    } 
                                    @if (alert.Sectors[2])
                                    {
                                        <span> 3 </span>
                                    } 
                                </td>
                                <td >@alert.DurationInMinutes</td>
                                <td><button class="btn btn-outline-warning" @onclick=@(() => SeeMore(alert))>See more</button></td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
            <br/>
            <nav>
                <ul class="pagination ">
                    @for (int i = 0; i < _numberOfPages; i++)
                    {
                        int page = i;
                        @if (_selectedPage == page + 1)
                        {
                            <li class="page-item active  ms-3" aria-current="page" style="cursor: pointer;  ">
                                <a class="page-link" style="background-color:  orange !important;" @onclick=@(() => SelectPage(page + 1))>
                                    @(i + 1)
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item  ms-3" aria-current="page" style="cursor: pointer;">
                                <a class="page-link" @onclick=@(() => SelectPage(page + 1))>
                                    @(i + 1)
                                </a>
                            </li>
                        }
                    }
                </ul>
            </nav>
            <div class="p-2 ">
                <div class=" dropup">
                    <button
                        class="btn btn-warning dropdown-toggle"
                        type="button"
                        id="dropdownMenuButton"
                        data-mdb-toggle="dropdown"
                        aria-expanded="false">
                        Rows/page: @_pageSize
                    </button>
                    <ul class="dropdown-menu   " aria-labelledby="dropdownMenuButton" style="z-index: 999;">
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(10))>10</a></li>
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(15))>15</a></li>
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(20))>20</a></li>
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(25))>25</a></li>
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Alert _alert = new Alert();
    private string? _text { get; set; }
    private ICollection<Alert>? _alerts { get; set; }
    private int _duration;
    private bool _sector1;
    private bool _sector2;
    private bool _sector3;
    private int _pageSize { get; set; } = 10;
    private int _totalNumberOfAlerts{ get; set; }
    private int _numberOfPages { get; set; }
    private int _selectedPage { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _alerts = await alertService.GetAlertsAsync(_selectedPage, _pageSize);
            _selectedPage = 1;
            _totalNumberOfAlerts = _alerts!.Count;
            if (_totalNumberOfAlerts < 10) _numberOfPages = 0;
            else _numberOfPages = _totalNumberOfAlerts / _pageSize +1;
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }


    private async Task SendAlert()
    {
        try
        {
            if (!_sector1 && !_sector2 &&!_sector3)
            {
                throw new Exception("Please select one or more sectors!");
            }
            if (_text == null || _text.Equals(String.Empty))
            {
                throw new Exception("An alert must have text");
            }
            _alert.DateTime = DateTime.Now;
            _alert.Text = _text;
            _alert.DurationInMinutes = _duration;
            bool[] ids = new bool[3];
            if (_sector1) ids[0] = true;
            if (_sector2) ids[1] = true;
            if (_sector3) ids[2] = true;
            _alert.Sectors = ids;
            String response=await alertService.SendAlertAsync(_alert);
            _alerts = await alertService.GetAlertsAsync(_selectedPage, _pageSize);
            await InvokeAsync(StateHasChanged);
            if (response == "success")
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(MessageModal.Message), "Alert sent successfully! ");
                parameters.Add(nameof(MessageModal.OkButton), "Ok");
                var modalReference = _modalService.Show<MessageModal>("Alert", parameters);
            }
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private void SeeMore(Alert alert)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AlertModal.Message),alert.Text);
        parameters.Add(nameof(AlertModal.dateTime),alert.DateTime);
        parameters.Add(nameof(AlertModal.duration),alert.DurationInMinutes);
        _modalService.Show<AlertModal>("Alert", parameters);
    }

    public bool IsActive(Alert alert)
    {
        double totalSeconds = alert.DurationInMinutes;
        TimeSpan finishTime=TimeSpan.FromSeconds(totalSeconds);
        DateTime finishDate = alert.DateTime.Add(finishTime);
        if (DateTime.Compare(finishDate, DateTime.Now) == -1 )
        {
            return false;
        }
        return true;

    }

   
    private async Task SelectPage(int i)
    {
        try
        {
            _selectedPage = i;
            _alerts = await alertService.GetAlertsAsync(_selectedPage, _pageSize);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private async Task SetPageSize(int pageIndex)
    {
        try
        {
            _pageSize = pageIndex;
            _numberOfPages = _totalNumberOfAlerts / _pageSize + 1;
            _alerts = await alertService.GetAlertsAsync(_selectedPage, _pageSize);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }
}