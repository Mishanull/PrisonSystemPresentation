@page "/PrisonersOverview"

@using Entities
@using Contracts
@using BlazorSide.UIComponents

@inject NavigationManager NavMgr
@inject IPrisonerService PrisonerService
@inject IModalService ModalService
@attribute [Authorize(Policy = "WardenAccess")]

<br/>
<div class="d-flex flex-row  justify-content-center mb-3">
    <div class="p-2">
        <SfDropDownList TValue="OptionsValues" @onselectionchange="OnDropdownSelected" TItem="string" Placeholder="Select options for viewing data" @bind-Value="@_currentOption" DataSource="@(DisplayOptions)">
            <DropDownListEvents TItem="string" TValue="OptionsValues" ValueChange="@OnDropdownSelected"></DropDownListEvents>
        </SfDropDownList>
    </div>
    <div class="p-2">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="_filter"
               @bind:event="oninput">
    </div>
    <div class="p-2">
        <SfDropDownList TValue="SectorsValues" @onselectionchange="OnDropdownSelected" TItem="string" Placeholder="Select sector" @bind-Value="@_currentOption2" DataSource="@(SectorOptions)">
            <DropDownListEvents TItem="string" TValue="SectorsValues" ValueChange="@OnDropdownSelected"></DropDownListEvents>
        </SfDropDownList>
    </div>
</div>
<div class="d-flex flex-row justify-content-center  mt-5">
    @if (_currentOption == OptionsValues.Table)
    {
        <div class="d-flex flex-column col-md-7 align-items-center">
            <div class="card text-center overflow-y-scroll" style="height: 30rem;"><h5 class="card-header bg-info text-white" >Prisoners Overview</h5>
                <table class="table table-hover align-middle mb-0 bg-white">
                    <thead class="bg-info sticky-top">
                    <tr class="text-uppercase text-white">
                        <th scope="col">First name</th>
                        <th scope="col">Last name</th>
                        <th scope="col">Ssn</th>
                        <th scope="col">Crime commited</th>
                        <th scope="col">Sector</th>
                        <th scope="col">Status</th>
                        <th scope="col">Notes</th>
                        <th scope="col">Entry Date</th>
                        <th scope="col">Release Date</th>
                        <th scope="col">Points</th>
                        <th scope="col">Actions</th>
                    </tr>
                    </thead>

                    <tbody>
                    @foreach (var p in _prisoners!.Where(IsVisible))
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <img
                                        src="img/download.png"
                                        class="rounded-circle"
                                        alt=""
                                        style="width: 45px; height: 45px"/>
                                    <br/>
                                    <div class="ms-3">
                                        <p class="fw-bold mb-1">@p.FirstName</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.LastName</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.Ssn</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.CrimeCommitted</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.Sector?.Id</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                @if (p.EntryDate.Date > DateTime.Now)
                                {
                                    <span class="badge badge-primary rounded-pill d-inline">Not imprisoned yet</span>

                                }
                                else if (p.ReleaseDate > DateTime.Now)
                                {
                                    <span class="badge badge-warning rounded-pill d-inline">Imprisoned</span>
                                }
                                else if (p.ReleaseDate < DateTime.Now)
                                {
                                    <span class="badge badge-success rounded-pill d-inline">Released</span>
                                }
                            </td>
                            <td>
                                <a @onclick="@(() => { NavMgr.NavigateTo("/PrisonerNotes/" + @p.Id); })">
                                    <button
                                        type="button"
                                        class="btn btn-link btn-rounded btn-sm fw-bold"
                                        data-mdb-ripple-color="dark">
                                        Notes
                                    </button>
                                </a>
                            </td>
                            <td> @p.EntryDate.Day/@p.EntryDate.Month/@p.EntryDate.Year</td>
                            <td> @p.ReleaseDate.Day/@p.ReleaseDate.Month/@p.ReleaseDate.Year</td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <a @onclick="@(() => AddPoints(p.Id))">
                                        <button
                                            type="button"
                                            class="btn btn-link btn-rounded btn-sm fw-bold"
                                            data-mdb-ripple-color="dark">
                                            +
                                        </button>
                                    </a>
                                    <p class=" mb-1"> @p.Points</p>
                                    <a @onclick="@(() => SubtractPoints(p.Id) )">
                                        <button
                                            type="button"
                                            class="btn btn-link btn-rounded btn-sm fw-bold"
                                            data-mdb-ripple-color="dark">
                                            -
                                        </button>
                                    </a>
                                </div>
                            </td>
                            <td>
                                <a @onclick="@(() => { NavMgr.NavigateTo("/PrisonerDetail/" + @p.Id); })">
                                    <button
                                        type="button"
                                        class="btn btn-link btn-rounded btn-sm fw-bold"
                                        data-mdb-ripple-color="dark">
                                        Edit
                                    </button>
                                </a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <br/>
            <nav>
                <ul class="pagination ">
                    @for (int i = 0; i < _numberOfPages; i++)
                    {
                        int page = i;
                        @if (_selectedPage == page + 1)
                        {

                            <li class="page-item active ms-3" aria-current="page" style="cursor: pointer; background-color:  #41B3D3 !important;">
                                <a class="page-link" @onclick=@(() => SelectPage(page + 1))>
                                    @(i + 1)
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item  ms-3" aria-current="page" style="cursor: pointer;">
                                <a class="page-link" @onclick=@(() => SelectPage(page + 1))>
                                    @(i + 1)
                                </a>
                            </li>
                        }
                    }
                </ul>
            </nav>
            <div class="p-2 ">
                <div class=" dropup">
                    <button
                        class="btn btn-info dropdown-toggle"
                        type="button"
                        id="dropdownMenuButton"
                        data-mdb-toggle="dropdown"
                        aria-expanded="false">
                        Rows/page: @_pageSize
                    </button>
                    <ul class="dropdown-menu  " aria-labelledby="dropdownMenuButton" style="z-index: 999;">
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(10))>10</a></li>
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(15))>15</a></li>
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(20))>20</a></li>
                        <li><a class="dropdown-item" @onclick=@(() => SetPageSize(25))>25</a></li>
                    </ul>
                </div>
            </div>
        </div>
    }
    else if (_currentOption == OptionsValues.Grid && _prisoners!=null){
        <div class="row row-cols-1 row-cols-md-3">
            @foreach (var p in _prisoners.Where(IsVisible))
            {
                <div class="col mx-3">
                    <div class="card mt-3 ">
                        <div class="card-header text-white" style="background-color: #41B3D3 !important">@p.FirstName @p.LastName</div>
                        <div class="card-body text-center">
                            <img 
                                src="img/download.png"
                                class="rounded-circle"
                                alt=""
                                style="width: 100px; height: 100px"
                            />
                            <br/>
                            <ul class="list-group list-group-light">
                                <li class="list-group-item px-3">SSN: @p.Ssn</li>
                                <li class="list-group-item px-3">Crime: @p.CrimeCommitted</li>
                                <li class="list-group-item px-3">Status: <span class="badge badge-warning rounded-pill d-inline">Imprisoned</span> </li>
                                <li class="list-group-item px-3">Sector: @p.Sector!.Id </li>
                                <li class="list-group-item px-3">Points: @p.Points </li>
                                <li class="list-group-item px-3"><a @onclick="@(() => AddPoints(p.Id))">
                                 <button
                                     type="button"
                                     class="btn btn-link btn-rounded btn-sm fw-bold"
                                     data-mdb-ripple-color="dark">
                                     +
                                 </button>
                             </a>
                             <p class=" mb-1"> @p.Points</p>
                             <a @onclick="@(() => SubtractPoints(p.Id) )">
                                 <button
                                     type="button"
                                     class="btn btn-link btn-rounded btn-sm fw-bold"
                                     data-mdb-ripple-color="dark">
                                     -
                                 </button>
                             </a> </li>
                            </ul>
                            <br/>
                            <a @onclick="@(()=>{NavMgr.NavigateTo("/PrisonerDetail/"+@p.Id);})"  class="btn btn-primary">Edit</a>
                        </div>
                    </div>
                </div>
                <br/>
            }
        </div>
    }
    @if (_prisoners == null && !_prisoners!.Any())
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>

@code{
    private OptionsValues _currentOption { get; set; } = OptionsValues.Table;
    private SectorsValues _currentOption2 { get; set; } = SectorsValues.All;

    private ICollection<Prisoner>? _prisoners { get; set; }
    private string _filter { get; set; }

    private int _pageSize { get; set; } = 10;
    private int _totalNumberOfPrisoners { get; set; }
    private int _numberOfPages { get; set; }
    private int _selectedPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _selectedPage = 1;
            _prisoners = await PrisonerService.GetPrisonersAsync(_selectedPage, _pageSize);
            _totalNumberOfPrisoners = _prisoners!.Count;
            if (_totalNumberOfPrisoners < 10) _numberOfPages = 0;
            else _numberOfPages = _totalNumberOfPrisoners / _pageSize +1;
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
        
    }
    
    public string[] DisplayOptions = Enum.GetNames(typeof(OptionsValues));
    public enum OptionsValues
    {
        Table,
        Grid
    }
    private void OnDropdownSelected()
    {
        Console.WriteLine(_currentOption);
    }
    public string[] SectorOptions = Enum.GetNames(typeof(SectorsValues));
    public enum SectorsValues
    {
        All,
        Sector1,
        Sector2,
        Sector3
    }
    
    private bool IsVisible(Prisoner prisoner)
    {
        if (CheckFilter(prisoner) && _currentOption2.ToString().Equals("All"))
            return true;
 
        if (CheckFilter(prisoner) && _currentOption2.ToString().Equals("Sector"+prisoner.Sector.Id))
            return true;

        return false;
    }
    
    private bool CheckFilter(Prisoner prisoner)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;
 
        if (prisoner.FirstName.Contains(_filter, StringComparison.OrdinalIgnoreCase) 
            || prisoner.LastName.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
 
        if (prisoner.Ssn.ToString().StartsWith(_filter) || prisoner.Sector.Id.ToString().StartsWith(_filter))
            return true;

        return false;
    }
    private async Task SelectPage(int page)
    {
        try
        {
            _selectedPage = page;
            _prisoners = await PrisonerService.GetPrisonersAsync(_selectedPage, _pageSize);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private async Task SetPageSize(int pageSize)
    {
        try
        {
            _pageSize = pageSize;
            _numberOfPages = _totalNumberOfPrisoners / _pageSize + 1;
            _prisoners = await PrisonerService.GetPrisonersAsync(_selectedPage, _pageSize);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private async Task AddPoints(long id)
    {
        try
        {
            _prisoners = await PrisonerService.GetPrisonersAsync(_selectedPage, _pageSize);
            await PrisonerService.AddPointsToPrisonerAsync(id, 1);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }
    
    private async Task SubtractPoints(long id)
    {
        try
        {
            _prisoners = await PrisonerService.GetPrisonersAsync(_selectedPage, _pageSize);
            await PrisonerService.AddPointsToPrisonerAsync(id, -1);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }
}