@page "/PrisonersOverview"
@using Entities
@using Contracts
@using BlazorLoginApp.Authentication
@using BlazorSide.UIComponents
@using Microsoft.VisualBasic.CompilerServices

@inject NavigationManager _navMgr
@inject IAuthService _authService
@inject IPrisonerService _prisonerService
@inject IModalService _modalService
@attribute [Authorize(Policy = "WardenAccess")]


<div class="row container"><h5>Choose how you want to see the prisoners: </h5></div>
<br/>
<div class="d-flex flex-row mb-3">
    <div class="p-2">
        <SfDropDownList TValue="OptionsValues" @onselectionchange="OnDropdownSelected" TItem="string" Placeholder="Select options for viewing data" @bind-Value="@currentOption" DataSource="@(Options)">
            <DropDownListEvents TItem="string" TValue="OptionsValues" ValueChange="@OnDropdownSelected"></DropDownListEvents>
        </SfDropDownList>
    </div>
    <div class="p-2">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter"
               @bind:event="oninput">
    </div>
    <div class="p-2">
        <SfDropDownList TValue="SectorsValues" @onselectionchange="OnDropdownSelected" TItem="string" Placeholder="Select sector" @bind-Value="@currentOption2" DataSource="@(Options2)">
            <DropDownListEvents TItem="string" TValue="SectorsValues" ValueChange="@OnDropdownSelected"></DropDownListEvents>
        </SfDropDownList>
    </div>
</div>
<div class="row  mt-5">
    @if (currentOption == OptionsValues.Table)
    {
        <div class="d-flex flex-column col-md-7 align-items-center">
            <div class="card text-center overflow-y-scroll" style="height: 30rem;"><h5 class="card-header bg-info text-white" >Inmates Overview</h5>
                <table class="table table-hover align-middle mb-0 bg-white">
                    <thead class="bg-info sticky-top">
                    <tr class="text-uppercase text-white">
                        <th scope="col">First name</th>
                        <th scope="col">Last name</th>
                        <th scope="col">Ssn</th>
                        <th scope="col">Crime commited</th>
                        <th scope="col">Sector</th>
                        <th scope="col">Status</th>
                        <th scope="col">Notes</th>
                        <th scope="col">Actions</th>
                    </tr>
                    </thead>

                    <tbody>
                    @foreach (var p in prisoners!.Where(IsVisible))
                    {
                        <tr>

                            <td>
                                <div class="d-flex align-items-center">
                                    <img
                                        src="img/download.png"
                                        class="rounded-circle"
                                        alt=""
                                        style="width: 45px; height: 45px"/>
                                    <br/>
                                    <div class="ms-3">
                                        <p class="fw-bold mb-1">@p.FirstName</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.LastName</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.Ssn</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">@p.CrimeCommitted</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="ms-3">
                                        <p class=" mb-1">S: @p.Sector?.Id</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="badge badge-warning rounded-pill d-inline">Imprisoned</span>
                            </td>
                            
                            <td>
                                <a @onclick="@(() => { _navMgr.NavigateTo("/PrisonerNotes/" + @p.Id); })">
                                    <button
                                        type="button"
                                        class="btn btn-link btn-rounded btn-sm fw-bold"
                                        data-mdb-ripple-color="dark">
                                        Notes
                                    </button>
                                </a>
                            </td>

                            <td>
                                <a @onclick="@(() => { _navMgr.NavigateTo("/PrisonerDetail/" + @p.Id); })">
                                    <button
                                        type="button"
                                        class="btn btn-link btn-rounded btn-sm fw-bold"
                                        data-mdb-ripple-color="dark">
                                        Edit
                                    </button>
                                </a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (currentOption == OptionsValues.Grid && prisoners!=null){
        <div class="row row-cols-1 row-cols-md-3">
            @foreach (var p in prisoners.Where(IsVisible))
            {
                <div class="col mx-3">
                    <div class="card mt-3 ">
                        <div class="card-header text-white" style="background-color: #41B3D3 !important">@p.FirstName @p.LastName</div>
                        <div class="card-body text-center">
                            <img 
                                src="img/download.png"
                                class="rounded-circle"
                                alt=""
                                style="width: 100px; height: 100px"
                            />
                            <ul class="list-group list-group-light">
                                <li class="list-group-item px-3">SSN: @p.Ssn</li>
                                <li class="list-group-item px-3">Crime: @p.CrimeCommitted</li>
                                <li class="list-group-item px-3">Status: <span class="badge badge-warning rounded-pill d-inline">Imprisoned</span> </li>
                                <li class="list-group-item px-3">Sector: @p.Sector!.Id </li>
                            </ul>
                            <br/>
                            <a @onclick="@(()=>{_navMgr.NavigateTo("/PrisonerDetail/"+@p.Id);})"  class="btn btn-primary">Edit</a>
                        </div>
                    </div>
                </div>
                <br/>
            }
        </div>
    }
    @if (prisoners == null && !prisoners!.Any())
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>

@code{
    private OptionsValues currentOption { get; set; }=OptionsValues.Table;
    private SectorsValues currentOption2 { get; set; }=SectorsValues.All;

    private ICollection<Prisoner>? prisoners;
    private string Filter { get; set; }
    private int _sector;

    private int pageNumber, pageSize;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // prisoners = await _prisonerService.GetPrisonersAsync();
            prisoners = await _prisonerService.GetPrisonersAsync(pageNumber, pageSize);
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
        
    }
    public string[] Options = Enum.GetNames(typeof(OptionsValues));

    public enum OptionsValues
    {
        Table,
        Grid
    }
    private void OnDropdownSelected()
    {
        Console.WriteLine(currentOption);
            
    }
    
    public string[] Options2 = Enum.GetNames(typeof(SectorsValues));

    public enum SectorsValues
    {
        All,
        Sector1,
        Sector2,
        Sector3
    }
    
    private bool IsVisible(Prisoner prisoner)
    {
        if (CheckFilter(prisoner) && currentOption2.ToString().Equals("All"))
            return true;
 
        if (CheckFilter(prisoner) && currentOption2.ToString().Equals("Sector"+prisoner.Sector.Id))
            return true;

        return false;
    }
    
    private bool CheckFilter(Prisoner prisoner)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
 
        if (prisoner.FirstName.Contains(Filter, StringComparison.OrdinalIgnoreCase) 
            || prisoner.LastName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
 
        if (prisoner.Ssn.ToString().StartsWith(Filter) || prisoner.Sector.Id.ToString().StartsWith(Filter))
            return true;

        return false;
    }
}