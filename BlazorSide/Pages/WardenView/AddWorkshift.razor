@page "/AddWorkshift"

@using Entities
@using Syncfusion.Blazor.Lists
@using Contracts
@using BlazorSide.UIComponents
@using System.Linq

@inject IWorkShiftService WorkShiftService
@inject IModalService ModalService
@inject IGuardService GuardService
@inject ISectorService SectorService
@inject NavigationManager NavMgr

@attribute [Authorize(Policy = "WardenAccess")]

<div class="container-fluid w-50 align-self-center p-3 mx-5" style="background-color:#41B3D3; border-radius: 5px; ">
    <EditForm Model="@_newWorkShift" OnValidSubmit="@AddNewWorkShift">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <h3>Create a workshift:</h3>
        <br/>
        <label class="text-white">
            Day of the week:
            <SfMultiSelect TItem="string" TValue="string[]" PopupHeight="200px" @bind-Value="@_dayValue" DataSource="_daysOfTheWeek">
                <MultiSelectFieldSettings Text="Day" Value="Day"/>
            </SfMultiSelect>
        </label>
        <p></p>
        <br/>
        <div class="row">
            <br/>
            <div class="col-md-6">
                <label for="start-time" class="text-white"> Start time: </label>
                <SfTimePicker ID="start-time" @bind-Value="@_startTime" Step=60 Format="HH:mm"></SfTimePicker>
            </div>
            <div class="col-md-6">
                <label for="end-time" class="text-white">End time: </label>
                <SfTimePicker ID="end-time" @bind-Value="@_endTime" Step=60 Format="HH:mm"></SfTimePicker>
            </div>
        </div>
        <br/>
        <p></p>
        <label class="text-white">
            Sector:
            <SfDropDownList TItem="Sector" TValue="string" PopupHeight="200px" @bind-Value="@_sectorValue" DataSource="@_sectors">
                <DropDownListFieldSettings Text="Id" Value="Id"/>
            </SfDropDownList>
        </label>
        <br/>
        <br/>
        <div id="container">
            <div class="sample flex">
                <div class="flex">
                    <div class="padding">
                        <SfListView DataSource="@_guardsToBeAdded" ShowHeader="true">
                            <ListViewFieldSettings TValue="Guard" Id="Id" Text="FirstName"></ListViewFieldSettings>
                            <ListViewTemplates TValue="Guard">
                                <HeaderTemplate>
                                    <div class="headerContainer">
                                        <span class="header">Guards to be added</span>
                                    </div>
                                </HeaderTemplate>
                            </ListViewTemplates>
                            <ListViewEvents TValue="Guard" Clicked="@(e => OnSelected(e, 1))"></ListViewEvents>
                        </SfListView>
                    </div>
                    <div class="flex vertical vertical__center flex__center padding">
                        <div class="padding">
                            <button disabled="@(!_guardsToBeAdded.Any())" type="button" class="e-btn" @onclick="@(e => OnButtonClick(1))">@(">>")</button>
                        </div>
                        <div class="padding">
                            <button disabled="@(_firstSelected == null)" type="button" class="e-btn" @onclick="@(e => OnButtonClick(2))">@(">")</button>
                        </div>
                        <div class="padding">
                            <button disabled="@(_secondSelected == null)" type="button" class="e-btn" @onclick="@(e => OnButtonClick(3))">@("<")</button>
                        </div>
                        <div class="padding">
                            <button disabled="@(!_availableGuards.Any())" type="button" class="e-btn" @onclick="@(e => OnButtonClick(4))">@("<<")</button>
                        </div>
                    </div>
                    <div class="padding">
                        <SfListView DataSource="@_availableGuards" ShowHeader="true">
                            <ListViewFieldSettings Id="Id" Text="FirstName" TValue="Guard"></ListViewFieldSettings>
                            <ListViewTemplates TValue="Guard">
                                <HeaderTemplate>
                                    <div class="headerContainer">
                                        <span class="header">Available guards</span>
                                    </div>
                                </HeaderTemplate>
                            </ListViewTemplates>
                            <ListViewEvents TValue="Guard" Clicked="@(e => OnSelected(e, 2))"></ListViewEvents>
                        </SfListView>
                    </div>
                </div>
            </div>
        </div>
        <br/>
        <button class="btn btn-white" type="submit">Add New WorkShift</button>
    </EditForm>
</div>


@if (!string.IsNullOrEmpty(_errorLabel))
{
    <label style="color: red">Error: @_errorLabel</label>
}

@code {
    private List<Guard> _guardsToBeAdded;
    private List<Guard> _availableGuards;
    private Guard _firstSelected { get; set; }
    private Guard _secondSelected { get; set; }

    private WorkShift _newWorkShift = new();
    private string _errorLabel = String.Empty;
    private DateTime? _startTime { get; set; } = DateTime.Now;
    private DateTime? _endTime { get; set; } = DateTime.Now + TimeSpan.FromHours(4);
    private string[] _dayValue = {};
    private ICollection<string> _daysOfTheWeek = new DaysOfTheWeek().Days;
    private ICollection<Sector> _sectors;
    private string _sectorValue = "fail";
    
    [CascadingParameter]
    private IModalService _modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchGuards();
        try
        {
            _sectors = await SectorService.GetSectorsAsync();
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private async Task AddNewWorkShift()
    {
        _newWorkShift.Start = (DateTime) _startTime!;
        _newWorkShift.End = (DateTime) _endTime!;
        _newWorkShift.Sector = _sectors.First(s => s.Id == Int64.Parse(_sectorValue));
        _newWorkShift.DaysOfWeek = string.Join(", ", _dayValue);
        _newWorkShift.Guards = _guardsToBeAdded;
        
        var parameters = new ModalParameters();
        parameters.Add(nameof(ChoiceModal.Message), "Workshift added successfully");
        parameters.Add(nameof(ChoiceModal.FirstButton), "Go back");
        parameters.Add(nameof(ChoiceModal.SecondButton),"Go to workshift overview");
        parameters.Add(nameof(ChoiceModal.ThirdButton), "Add another workshift");
        try
        {
            await WorkShiftService.CreateWorkShiftAsync(_newWorkShift);
            var modalRef = ModalService.Show<ChoiceModal>("Success", parameters);
            var result = await modalRef.Result;
            if (!result.Cancelled)
            {
                string? message;
                message = result.Data?.ToString() ?? string.Empty;
                switch (message)
                {
                    case "Go back":
                    {
                        await BackToHome();
                        break;
                    }
                    case "Add another workshift":
                    {
                        await BackToAdd();
                        break;
                    }
                    case "Go to workshift overview":
                        await BackToOptions();
                        break;
                }
            }
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private async Task BackToAdd()
    {
        await FetchGuards();
        StateHasChanged();
    }

    private async Task BackToHome()
    {
        NavMgr.NavigateTo("/");
    }
    
    private async Task BackToOptions()
    {
        NavMgr.NavigateTo("/WorkshiftOptions");
    }
    

    private async Task FetchGuards()
    {
        _guardsToBeAdded = new List<Guard>();
        try
        {
            ICollection<WorkShift> tempWorkshifts = await WorkShiftService.GetWorkShifts();
            Console.Write(tempWorkshifts);
            ICollection<Guard> takenGuards = new List<Guard>();
            foreach (var workShift in tempWorkshifts)
            {
                if (workShift.Guards != null)
                {
                    foreach (var workShiftGuard in workShift.Guards)
                        takenGuards.Add(workShiftGuard);
                }
            }

            _availableGuards = (List<Guard>) await GuardService.GetGuardsAsync(20);

            foreach (var takenGuard in takenGuards)
            {
                try
                {
                    if (_availableGuards.Contains(_availableGuards.Find(g => g.Id == takenGuard.Id))) 
                            _availableGuards.Remove(_availableGuards.Find(g => g.Id == takenGuard.Id));
                }
                catch (Exception e)
                {
                    _errorLabel = e.Message;
                }
            }
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private void OnButtonClick(int buttonIndex)
    {
        switch (buttonIndex)
        {
            case 1:
                _guardsToBeAdded.ForEach(e => _availableGuards.Add(e));
                _guardsToBeAdded.Clear();
                break;
            case 2:
                if (_firstSelected != null)
                {
                    _availableGuards.Add(_firstSelected);
                    _guardsToBeAdded.RemoveAt(_guardsToBeAdded.FindIndex(e => e.Id == _firstSelected.Id));
                    _firstSelected = null;
                }
                break;
            case 3:
                if (_secondSelected != null)
                {
                    _guardsToBeAdded.Add(_secondSelected);
                    _availableGuards.RemoveAt(_availableGuards.FindIndex(e => e.Id == _secondSelected.Id));
                    _secondSelected = null;
                }
                break;
            case 4:
                _availableGuards.ForEach(e => _guardsToBeAdded.Add(e));
                _availableGuards.Clear();
                break;
            default:
                break;
        }
    }

    private void OnSelected(ClickEventArgs<Guard> eventArgs, int listviewIndex)
    {
        if (listviewIndex == 1)
        {
            _firstSelected = eventArgs.ItemData;
        }
        else
        {
            _secondSelected = eventArgs.ItemData;
        }
    }
}


<style>
    .e-listview.e-lib {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
        width: 250px;
    }
    
    .header {
        font-weight: bold;
        font-size: larger;
        /*color: black;*/
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .padding {
        padding: 4px;
        background: white;
    }

    .right__align {
        text-align: right;
        margin-right: 8px;
        padding-right: 8px;
    }

    .left__align {
        margin-left: 8px;
        padding-left: 8px;
    }

    .content__container {
        background-color: aliceblue;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .vertical__center {
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .flex__order__1 {
        order: 1;
    }

    .flex__order__2 {
        order: 2;
    }

    .flex__1 {
        flex: 1;
    }

    .flex__2 {
        flex: 2;
    }

    .flex__3 {
        flex: 3;
    }

    .flex__5 {
        flex: 5;
    }

    .flex__8 {
        flex: 8;
    }

    .bold {
        font-weight: 500;
    }

    .margin {
        margin: 10px;
    }

    .small__font {
        font-size: 13px;
        margin: 2px 0;
    }
</style>