@page "/AddPrisoner"

@using Entities
@using Contracts
@using BlazorSide.UIComponents
@using System.ComponentModel.DataAnnotations

@inject IPrisonerService PrisonerService
@inject ISectorService SectorService
@inject IModalService ModalService
@inject NavigationManager NavMgr

@attribute [Authorize(Policy = "WardenAccess")]

<div class="container-fluid w-50 align-self-center p-3 mx-5" style="background-color:#41B3D3; border-radius: 5px; ">
    <EditForm Model="@_newPrisoner" OnValidSubmit="@AddNewPrisoner">
        <DataAnnotationsValidator/> 
        <ValidationSummary/>
        <div class="row">
            <div class="col-md-6">
                <label class="text-white"> First Name:</label> <InputText @bind-Value="_newPrisoner.FirstName" class="form-control " type="text" />
            </div>
            <div class="col-md-6">
                <label class="text-white">Last Name:</label> <InputText @bind-Value="_newPrisoner.LastName" class="form-control " type="text" />
            </div>
        </div>
        <br/>
        <label class="text-white">SSN: </label> <InputNumber @bind-Value="_newPrisoner.Ssn" class="form-control" Min="1111"  />
        <br/>
        <div class="form- mb-4">
            <label for="Date-Entry" class="text-white"> Entry Date</label>
            <SfDatePicker ID="Date-Entry" TValue="DateTime" Placeholder="Choose a Date" ShowClearButton="true" @bind-Value="@_entryDate">
                <DatePickerEvents TValue="DateTime"></DatePickerEvents>
            </SfDatePicker>
        </div>
        <div class="form- mb-4">
            <label for="Date-Entry" class="text-white"> Release Date</label>
            <SfDatePicker ID="Date-Release" TValue="DateTime" Placeholder="Choose a Date" ShowClearButton="true" @bind-Value="@_releaseDate">
                <DatePickerEvents TValue="DateTime"></DatePickerEvents>
            </SfDatePicker>
        </div>
        <label class="text-white">Crime Commited: </label> <InputText @bind-Value="_newPrisoner.CrimeCommitted" class="form-control" type="text"  />
        <br/>
        <label class="text-white">Sector:
            <SfDropDownList TItem="Sector" TValue="Sector" PopupHeight="200px"  @bind-Value="@_newPrisoner.Sector" Placeholder="Select a sector: " DataSource=@(_sectors)>
                <DropDownListFieldSettings   Text="Id" Value="Id"></DropDownListFieldSettings>
            </SfDropDownList>
        </label>
        <br/>
        <br/>
        <button class="btn btn-white" type="submit">Add New Prisoner</button>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(_errorLabel))
{
    <label style="color: red;">Error: @_errorLabel</label>
}

@code {
    private Prisoner _newPrisoner = new Prisoner();
    [Required]
    private DateTime _entryDate = DateTime.Now;
    private DateTime _releaseDate = DateTime.Now;
    
    private string _errorLabel = String.Empty;
    [CascadingParameter]
    private IModalService _modal { get; set; }

    private ICollection<Sector> _sectors;
    protected async override Task OnInitializedAsync()
    {
        _sectors = await SectorService.GetSectorsAsync();
    }
    
    private async Task AddNewPrisoner()
    {
        var parameters = new ModalParameters();
            parameters.Add(nameof(ChoiceModal.Message),"Prisoner added successfully");
            parameters.Add(nameof(ChoiceModal.FirstButton),"Go back");
            parameters.Add(nameof(ChoiceModal.SecondButton),"Go to Prisoners Overview");
            parameters.Add(nameof(ChoiceModal.ThirdButton),"Add Another Prisoner");
            try
            {
                if (_entryDate >= _releaseDate)
                {
                    throw new Exception("Release date cannot be earlier or the same day as entry date.");
                }
                _newPrisoner.EntryDate = _entryDate;
                _newPrisoner.ReleaseDate = _releaseDate;
                await PrisonerService.CreatePrisonerAsync(_newPrisoner);
                _newPrisoner = new Prisoner();
                
                var modalRef=ModalService.Show<ChoiceModal>("Success",parameters);
                var result = await modalRef.Result;
                if (!result.Cancelled)
                {
                    string? message;
                    message = result.Data?.ToString() ?? string.Empty;
                    switch (message)
                    {
                        case "Go back":
                        {
                            await BackToOptions();
                            break;
                        }
                        case "Go to Prisoners Overview":
                        {
                            await GoToOverview();
                            break;
                        }
                        case "Add Another Prisoner":
                        {
                            await BackToAdd();
                            break;
                        }
                    }
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                paramet.Add(nameof(ErrorModal.Message),e.Message);
                ModalService.Show<ErrorModal>("Error",paramet);
            }
    }

    private async Task BackToAdd()
    {
        StateHasChanged();
    }

    private async Task GoToOverview()
    {
        NavMgr.NavigateTo("/PrisonersOverview");
    }

    private async Task BackToOptions()
    {
        NavMgr.NavigateTo("/PrisonersOptions");
    }

}
