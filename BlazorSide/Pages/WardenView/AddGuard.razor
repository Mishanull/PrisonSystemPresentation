@page "/AddGuard"

@using Entities
@using Microsoft.AspNetCore.Components
@using Contracts
@using BlazorSide.UIComponents

@inject IGuardService GuardService
@inject IModalService ModalService
@inject NavigationManager NavMgr
@attribute [Authorize(Policy = "WardenAccess")]

<div class="container-fluid w-50 align-self-center p-3 mx-5" style="background-color:#41B3D3; border-radius: 5px; ">
    <EditForm Model="@_newGuard" OnValidSubmit="@AddNewGuard">
        <DataAnnotationsValidator/> 
        <ValidationSummary/>
        <h3>Add Guard:</h3>
        <div class="row">
            <div class="col-md-6">
                <label class="text-white"> First Name:</label> <InputText @bind-Value="_newGuard.FirstName" class="form-control " type="text" />
            </div>
            <div class="col-md-6">
                <label class="text-white">Last Name:</label> <InputText @bind-Value="_newGuard.LastName" class="form-control " type="text" />
            </div>
        </div>
        <br/>
        <label class="text-white">Email:</label> <InputText @bind-Value="_newGuard.Email" class="form-control" type="email" />
        <br/>  
        <label class="text-white">Phone Number:</label> <InputText @bind-Value="_newGuard.PhoneNumber" class="form-control" type="tel"  />
        <br/>
        <button class="btn btn-white" type="submit">Add New Guard</button>
    </EditForm>
</div>
@if (!string.IsNullOrEmpty(_errorLabel))
        {
            <label style="color: red;">Error: @_errorLabel</label>
        }

@code {
    private Guard _newGuard = new Guard();
    private string _errorLabel = String.Empty;
    [CascadingParameter]
    private IModalService _modal { get; set; }
    
    private async Task AddNewGuard()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ChoiceModal.Message),"Guard added successfully");
        parameters.Add(nameof(ChoiceModal.FirstButton),"Go back");
        parameters.Add(nameof(ChoiceModal.SecondButton),"Go to Guards Overview");
        parameters.Add(nameof(ChoiceModal.ThirdButton),"Add Another Guard");
        try
        {
            await GuardService.CreateGuardAsync(_newGuard);
            _newGuard = new Guard();
            var modalRef=ModalService.Show<ChoiceModal>("Success",parameters);
            var result = await modalRef.Result;
            if (!result.Cancelled)
            {
                string? message;
                message = result.Data?.ToString() ?? string.Empty;
                switch (message)
                {
                    case "Go back":
                    {
                        await BackToOptions();break;
                    }
                    case "Go to Guards Overview":
                    {
                        await GoToOverview();
                        break;
                    }
                    case "Add Another Guard":
                    {
                        await BackToAdd();break;
                    }
                }
            }
        }
        catch (Exception e)
                {
                    var paramet = new ModalParameters();
                    paramet.Add(nameof(ErrorModal.Message),e.Message);
                    ModalService.Show<ErrorModal>("Error",paramet);
                }
    }
    

    private async Task BackToAdd()
    {
        _newGuard=new Guard();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GoToOverview()
    {
        NavMgr.NavigateTo("/GuardsOverview");
    }

    private async Task BackToOptions()
    {
        NavMgr.NavigateTo("/GuardsOptions");
    }

}