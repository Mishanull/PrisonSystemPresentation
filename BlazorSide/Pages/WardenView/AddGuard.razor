@page "/AddGuard"
@using Entities
@using Microsoft.AspNetCore.Components
@using Contracts
@using BlazorSide.UIComponents
@using System.Security
@using Utilities
@inject IGuardService _guardService
@inject IModalService _modalService
@inject NavigationManager _navMgr
@attribute [Authorize(Policy = "WardenAccess")]

<div class="container-fluid w-50 align-self-center p-3 mx-5" style="background-color:#41B3D3; border-radius: 5px; ">
    <EditForm Model="@newGuard" OnValidSubmit="@AddNewGuard">
        <DataAnnotationsValidator/> 
        <ValidationSummary/>
        <h3>Add Guard:</h3>
        <div class="row">
            <div class="col-md-6">
                <label class="text-white"> First Name:</label> <InputText @bind-Value="newGuard.FirstName" class="form-control " type="text" />
            </div>
            <div class="col-md-6">
                <label class="text-white">Last Name:</label> <InputText @bind-Value="newGuard.LastName" class="form-control " type="text" />
            </div>
        </div>
        <br/>
        <label class="text-white">Email:</label> <InputText @bind-Value="newGuard.Email" class="form-control" type="email" />
        <br/>  
        <label class="text-white">Phone Number:</label> <InputText @bind-Value="newGuard.PhoneNumber" class="form-control" type="tel"  />
        <br/>
        <label class="text-white">Username:</label><InputText @bind-Value="newGuard.Username" class="form-control"  />
        <br/>
        <button class="btn btn-white" type="submit">Add New Guard</button>
    </EditForm>
</div>
@if (!string.IsNullOrEmpty(errorLabel))
        {
            <label style="color: red;">Error: @errorLabel</label>
        }
@code {
    private Guard newGuard=new Guard();
    private string errorLabel=String.Empty;
    [CascadingParameter]
    private IModalService Modal { get; set; }
    private async Task AddNewGuard()
    {
        
            var parameters = new ModalParameters();
            parameters.Add(nameof(ChoiceModal.Message),"Guard added successfully");
            parameters.Add(nameof(ChoiceModal.FirstButton),"Go back");
            parameters.Add(nameof(ChoiceModal.SecondButton),"Go to Guards Overview");
            parameters.Add(nameof(ChoiceModal.ThirdButton),"Add Another Guard");
            try
            {
                await _guardService.CreateGuardAsync(newGuard);
                newGuard = new Guard();
                var modalRef=_modalService.Show<ChoiceModal>("Success",parameters);
                var result = await modalRef.Result;
                if (!result.Cancelled)
                {
                    string? message;
                    message = result.Data?.ToString() ?? string.Empty;
                    switch (message)
                    {
                        case "Go back":
                        {
                            await BackToOptions();
                            break;
                        }
                        case "Go to Guards Overview":
                        {
                            await GoToOverview();
                            break;
                        }
                        case "Add Another Guard":
                        {
                            await BackToAdd();
                            break;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                errorLabel = e.Message;
            }
            
        }
    

    private async Task BackToAdd()
    {
        StateHasChanged();
    }

    private async Task GoToOverview()
    {
        _navMgr.NavigateTo("/GuardsOverview");
    }

    private async Task BackToOptions()
    {
        _navMgr.NavigateTo("/GuardsOptions");
    }

}