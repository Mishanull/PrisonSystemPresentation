@page "/WorkshiftDetails/{id:long}"

@using Entities
@using Contracts
@using BlazorSide.UIComponents
@using Syncfusion.Blazor.Lists
@using System.Linq

@inject IWorkShiftService WorkShiftService
@inject IModalService ModalService
@inject IGuardService GuardService
@inject ISectorService SectorService
@inject NavigationManager NavMgr

@attribute [Authorize(Policy = "WardenAccess")]

<div class="container-fluid w-50 align-self-center p-3 mx-5" style="background-color:#41B3D3; border-radius: 5px; ">
    <EditForm Model="@_editedWorkshift" OnValidSubmit="@EditWorkShift">
        <DataAnnotationsValidator/> 
        <ValidationSummary/>
        <h3>Edit a workshift n(@_editedWorkshift.Id)</h3>
        <br/>
        <label class="text-white">Day of the week:
            <SfMultiSelect  TItem="string" TValue="string[]" PopupHeight="200px"  @bind-Value="@_dayValue" DataSource="_daysOfTheWeek">
                <MultiSelectFieldSettings  Text="Day" Value="Day"/>
            </SfMultiSelect>
        </label> 
        <p></p>
        <br/>
        <div class="row">
            <br/>
            <div class="col-md-6">
                <label for="start-time" class="text-white"> Start time:</label>
                <SfTimePicker ID="start-time" @bind-Value="@_startTime" Step=60 Format="HH:mm"></SfTimePicker>

            </div>
            <div class="col-md-6">
                <label for="end-time" class="text-white">End time: </label>
                <SfTimePicker ID="end-time" @bind-Value="@_endTime" Step=60 Format="HH:mm"></SfTimePicker>
            </div>
        </div>
        <br/>
        <p></p>
        <label class="text-white">Sector:
            <SfDropDownList TItem="Sector" TValue="string" PopupHeight="200px"  @bind-Value="@_sectorValue"  DataSource="_sectors">
                <DropDownListFieldSettings   Text="Id" Value="Id"/>
            </SfDropDownList>
        </label> 
        <br/>
        <br/>
         <div id="container">
                    <div class="sample flex">
                        <div class="flex">
                            <div class="padding">
                                <SfListView DataSource="@_currentGuards" ShowHeader="true">
                                    <ListViewFieldSettings TValue="Guard" Id="Id" Text="FirstName"></ListViewFieldSettings>
                                    <ListViewTemplates TValue="Guard">
                                        <HeaderTemplate>
                                            <div class="headerContainer">
                                                <span class="header">Guards to be added</span>
                                            </div>
                                        </HeaderTemplate>
                                    </ListViewTemplates>
                                    <ListViewEvents TValue="Guard" Clicked="@(e => OnSelected(e, 1))"></ListViewEvents>
                                </SfListView>
                            </div>
                            <div class="flex vertical vertical__center flex__center padding">
                                <div class="padding">
                                    <button disabled="@(!_currentGuards.Any())" type="button" class="e-btn" @onclick="@(e => OnButtonClick(1))">@(">>")</button>
                                </div>
                                <div class="padding">
                                    <button disabled="@(_firstSelected == null)" type="button" class="e-btn" @onclick="@(e => OnButtonClick(2))">@(">")</button>
                                </div>
                                <div class="padding">
                                    <button disabled="@(_secondSelected == null)" type="button" class="e-btn" @onclick="@(e => OnButtonClick(3))">@("<")</button>
                                </div>
                                <div class="padding">
                                    <button disabled="@(!_availableGuards.Any())" type="button" class="e-btn" @onclick="@(e => OnButtonClick(4))">@("<<")</button>
                                </div>
                            </div>
                            <div class="padding">
                                <SfListView DataSource="@_availableGuards" ShowHeader="true">
                                    <ListViewFieldSettings Id="Id" Text="FirstName" TValue="Guard"></ListViewFieldSettings>
                                    <ListViewTemplates TValue="Guard">
                                        <HeaderTemplate>
                                            <div class="headerContainer">
                                                <span class="header">Available guards</span>
                                            </div>
                                        </HeaderTemplate>
                                    </ListViewTemplates>
                                    <ListViewEvents TValue="Guard" Clicked="@(e => OnSelected(e, 2))"></ListViewEvents>
                                </SfListView>
                            </div>
                        </div>
                    </div>
                </div>
        <br/>
    <div class="row">
        <div class="col-md-6"><button class="btn btn-white" >Update Workshift</button></div>
        <div class="col-md-6"><button class="btn btn-white" @onclick="DeleteWorkShift">Delete this workshift</button></div>
    </div> 
        </EditForm>
</div>

@if (!string.IsNullOrEmpty(_errorLabel))
        {
            <label style="color: red;">Error: @_errorLabel</label>
        }

@code {
    [Parameter]
    public virtual long? Id { get; set; }
    public virtual WorkShift _editedWorkshift { get; set; }
    private string _errorLabel = String.Empty;
    private string[] _dayValue = {};
    private ICollection<string> _daysOfTheWeek = new DaysOfTheWeek().Days;
    private string _sectorValue = "fail";
    private ICollection<Sector> _sectors;
    private DateTime? _startTime { get; set; } 
    private DateTime? _endTime { get; set; }
    private List<Guard> _currentGuards;
    private List<Guard> _availableGuards;
    private List<Guard> _guardsToClear = new();
    private Guard _firstSelected { get; set; }
    private Guard _secondSelected { get; set; }
    
    [CascadingParameter]
    private IModalService _modal { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            try
            {
                _sectors = await SectorService.GetSectorsAsync();
                _editedWorkshift = await WorkShiftService.GetWorkShiftById(Id.Value);
                _sectorValue = _editedWorkshift.Sector.Id.ToString();
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                paramet.Add(nameof(ErrorModal.Message),e.Message);
                ModalService.Show<ErrorModal>("Error",paramet);
            }
            _startTime = _editedWorkshift.Start;
            _endTime = _editedWorkshift.End;
            _dayValue = _editedWorkshift.DaysOfWeek.Split(", ");
            await FetchGuards(Id);
        }
        await base.OnParametersSetAsync();
    }
    
    private async Task EditWorkShift()
    {
        _editedWorkshift.Start = _startTime;
        _editedWorkshift.End = _endTime;
        _editedWorkshift.Sector = _sectors.First(s => s.Id == Int64.Parse(_sectorValue));
        _editedWorkshift.DaysOfWeek = string.Join(", ", _dayValue);
        _editedWorkshift.Guards = _currentGuards;
        
        var parameters = new ModalParameters();
        parameters.Add(nameof(ActionConfirm.Message),"Are you sure you want to update the workshift?");
        var modalRef=ModalService.Show<ActionConfirm>("Success",parameters);
        var result = await modalRef.Result;
        try
        {
            if (!result.Cancelled)
            {
                await ClearGuards();
                await WorkShiftService.UpdateWorkShiftAsync(_editedWorkshift);
                NavMgr.NavigateTo("/WorkShiftsOverview");
            }
        }
        catch (Exception e)
        {
            parameters.Add(nameof(ActionConfirm.Message),e.Message);
            ModalService.Show<ActionConfirm>("Failure", parameters);
        }
    }
    
    private async Task DeleteWorkShift()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ActionConfirm.Message), "Are you sure you want to delete the workshift?");
        var modalRef = ModalService.Show<ActionConfirm>("Delete", parameters);
        var result = await modalRef.Result;
        if (!result.Cancelled)
        {
            try
            {
                await WorkShiftService.RemoveWorkShiftAsync(_editedWorkshift.Id);
                NavMgr.NavigateTo("/WorkshiftsOverview");
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                paramet.Add(nameof(ErrorModal.Message),e.Message);
                ModalService.Show<ErrorModal>("Error",paramet);
            }
        }
    }
    
    private async Task FetchGuards(long? workshiftId)
    {
        WorkShift currentWorkshift = await WorkShiftService.GetWorkShiftById(workshiftId);
        _currentGuards = (List<Guard>) currentWorkshift.Guards;
        try
        {
            ICollection<WorkShift> tempWorkshifts = await WorkShiftService.GetWorkShifts();
            ICollection<Guard> takenGuards = new List<Guard>();
            foreach (var workShift in tempWorkshifts)
            {
                if (workShift.Guards != null)
                {
                    foreach (var workShiftGuard in workShift.Guards)
                        takenGuards.Add(workShiftGuard);
                }
            }

            _availableGuards = (List<Guard>) await GuardService.GetGuardsAsync(20);

            foreach (var takenGuard in takenGuards)
            {
                try
                {
                    if (_availableGuards.Contains(_availableGuards.Find(g => g.Id == takenGuard.Id))) 
                        _availableGuards.Remove(_availableGuards.Find(g => g.Id == takenGuard.Id));
                }
                catch (Exception e)
                {
                    var paramet = new ModalParameters();
                    paramet.Add(nameof(ErrorModal.Message),e.Message);
                    ModalService.Show<ErrorModal>("Error",paramet);
                }
            }
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private void OnButtonClick(int buttonIndex)
    {
        switch (buttonIndex)
        {
            case 1:
                _currentGuards.ForEach(e => _availableGuards.Add(e));
                _currentGuards.ForEach(e => _guardsToClear.Add(e));
                _currentGuards.Clear();
                break;
            case 2:
                if (_firstSelected != null)
                {
                    _availableGuards.Add(_firstSelected);
                    _guardsToClear.Add(_firstSelected);
                    _currentGuards.RemoveAt(_currentGuards.FindIndex(e => e.Id == _firstSelected.Id));
                    _firstSelected = null;
                }
                break;
            case 3:
                if (_secondSelected != null)
                {
                    _currentGuards.Add(_secondSelected);
                    _availableGuards.RemoveAt(_availableGuards.FindIndex(e => e.Id == _secondSelected.Id));
                    if(_guardsToClear.Any())
                    _guardsToClear.RemoveAt(_guardsToClear.FindIndex(e => e.Id == _secondSelected.Id));
                    _secondSelected = null;
                }
                break;
            case 4:
                _availableGuards.ForEach(e => _currentGuards.Add(e));
                _availableGuards.Clear();
                _guardsToClear.Clear();
                break;
            default:
                break;
        }
    }

    private void OnSelected(ClickEventArgs<Guard> eventArgs, int listviewIndex)
    {
        if (listviewIndex == 1)
        {
            _firstSelected = eventArgs.ItemData;
        }
        else
        {
            _secondSelected = eventArgs.ItemData;
        }
    }

    private async Task ClearGuards()
    {
        foreach (var guard in _guardsToClear)
        {
            try
            {
                await WorkShiftService.RemoveGuardFromWorkShift(guard.Id.ToString(), _editedWorkshift.Id.ToString());
            }
            catch (Exception e)
            {
                _errorLabel = e.Message;
                Console.WriteLine($"Failed to remove guard id {guard.Id} from workshift id {_editedWorkshift.Id}");
            }
        }
    }
    // TODO: fix modal issue ???
}


<style>
    .e-listview.e-lib {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
        width: 250px;
    }
    
    .header {
        font-weight: bold;
        font-size: larger;
        /*color: black;*/
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .padding {
        padding: 4px;
        background: white;
    }

    .right__align {
        text-align: right;
        margin-right: 8px;
        padding-right: 8px;
    }

    .left__align {
        margin-left: 8px;
        padding-left: 8px;
    }

    .content__container {
        background-color: aliceblue;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .vertical__center {
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .flex__order__1 {
        order: 1;
    }

    .flex__order__2 {
        order: 2;
    }

    .flex__1 {
        flex: 1;
    }

    .flex__2 {
        flex: 2;
    }

    .flex__3 {
        flex: 3;
    }

    .flex__5 {
        flex: 5;
    }

    .flex__8 {
        flex: 8;
    }

    .bold {
        font-weight: 500;
    }

    .margin {
        margin: 10px;
    }

    .small__font {
        font-size: 13px;
        margin: 2px 0;
    }
</style>