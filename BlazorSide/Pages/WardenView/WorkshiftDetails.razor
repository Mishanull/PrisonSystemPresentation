@page "/WorkshiftDetails/{id:long}"
@using Entities
@using Syncfusion.Blazor
@using Contracts
@using BlazorSide.UIComponents
@using Syncfusion.Blazor.Lists
@using System.Linq
@inject IWorkShiftService _workShiftService
@inject IModalService _modalService
@inject IGuardService _guardService
@inject ISectorService _sectorService
@inject NavigationManager _navMgr
@attribute [Authorize(Policy = "WardenAccess")]

<div class="container-fluid w-50 align-self-center p-3 mx-5" style="background-color:#41B3D3; border-radius: 5px; ">
    <EditForm Model="@editedWorkshift" OnValidSubmit="@EditWorkShift">
        <DataAnnotationsValidator/> 
        <ValidationSummary/>
        <h3>Edit a workshift n(@editedWorkshift.Id)</h3>
        <br/>
        <label class="text-white">Day of the week:
            <SfMultiSelect  TItem="string" TValue="string[]" PopupHeight="200px"  @bind-Value="@dayValue" DataSource="DaysOfTheWeek">
                <MultiSelectFieldSettings  Text="Day" Value="Day"/>
            </SfMultiSelect>
        </label> 
        <p></p>
        <br/>
        <div class="row">
            <br/>
            <div class="col-md-6">
                <label for="start-time" class="text-white"> Start time:</label>
                <SfTimePicker ID="start-time" @bind-Value="@StartTime" Step=60 Format="HH:mm"></SfTimePicker>

            </div>
            <div class="col-md-6">
                <label for="end-time" class="text-white">End time: </label>
                <SfTimePicker ID="end-time" @bind-Value="@EndTime" Step=60 Format="HH:mm"></SfTimePicker>
            </div>
        </div>
        <br/>
        <p></p>
        <label class="text-white">Sector:
            <SfDropDownList TItem="Sector" TValue="string" PopupHeight="200px"  @bind-Value="@sectorValue"  DataSource="sectors">
                <DropDownListFieldSettings   Text="Id" Value="Id"/>
            </SfDropDownList>
        </label> 
        <br/>
        <br/>
         <div id="container">
                    <div class="sample flex">
                        <div class="flex">
                            <div class="padding">
        
                                @* <SfTextBox Placeholder="Filter" Input="@(e => OnInput(e, 1))"></SfTextBox> *@
                                <SfListView DataSource="@currentGuards" ShowHeader="true">
                                    <ListViewFieldSettings TValue="Guard" Id="Id" Text="FirstName"></ListViewFieldSettings>
                                    <ListViewTemplates TValue="Guard">
                                        <HeaderTemplate>
                                            <div class="headerContainer">
                                                <span class="header">Guards to be added</span>
                                            </div>
                                        </HeaderTemplate>
                                    </ListViewTemplates>
                                    <ListViewEvents TValue="Guard" Clicked="@(e => OnSelected(e, 1))"></ListViewEvents>
                                </SfListView>
        
        
                            </div>
                            <div class="flex vertical vertical__center flex__center padding">
                                <div class="padding">
                                    <button disabled="@(!currentGuards.Any())" type="button" class="e-btn" @onclick="@(e => OnButtonClick(1))">@(">>")</button>
                                </div>
                                <div class="padding">
                                    <button disabled="@(FirstSelected == null)" type="button" class="e-btn" @onclick="@(e => OnButtonClick(2))">@(">")</button>
                                </div>
                                <div class="padding">
                                    <button disabled="@(SecondSelected == null)" type="button" class="e-btn" @onclick="@(e => OnButtonClick(3))">@("<")</button>
                                </div>
                                <div class="padding">
                                    <button disabled="@(!availableGuards.Any())" type="button" class="e-btn" @onclick="@(e => OnButtonClick(4))">@("<<")</button>
                                </div>
                            </div>
                            <div class="padding">
                                @* <SfTextBox Placeholder="Filter" Input="@(e => OnInput(e, 2))"></SfTextBox> *@
                                <SfListView DataSource="@availableGuards" ShowHeader="true">
                                    <ListViewFieldSettings Id="Id" Text="FirstName" TValue="Guard"></ListViewFieldSettings>
                                    <ListViewTemplates TValue="Guard">
                                        <HeaderTemplate>
                                            <div class="headerContainer">
                                                <span class="header">Available guards</span>
                                            </div>
                                        </HeaderTemplate>
                                    </ListViewTemplates>
                                    <ListViewEvents TValue="Guard" Clicked="@(e => OnSelected(e, 2))"></ListViewEvents>
                                </SfListView>
                            </div>
                        </div>
                    </div>
                </div>
        <br/>
    <div class="row">
        <div class="col-md-6"><button class="btn btn-white" >Update Workshift</button></div>
        <div class="col-md-6"><button class="btn btn-white" @onclick="DeleteWorkShift">Delete this workshift</button></div>
    </div> 
        </EditForm>
</div>

@if (!string.IsNullOrEmpty(errorLabel))
        {
            <label style="color: red;">Error: @errorLabel</label>
        }

@code {
    [Parameter]
    public virtual long? Id { get; set; }
    public virtual WorkShift editedWorkshift { get; set; }
    private string errorLabel = String.Empty;
    private string[] dayValue = {};
    private ICollection<string> DaysOfTheWeek = new DaysOfTheWeek().Days;
    private string sectorValue = "fail";
    private ICollection<Sector> sectors;
    private DateTime? StartTime { get; set; } 
    private DateTime? EndTime { get; set; }
    private List<Guard> currentGuards;
    private List<Guard> availableGuards;
    private List<Guard> guardsToClear = new();
    private Guard FirstSelected { get; set; }
    private Guard SecondSelected { get; set; }
    
    
    [CascadingParameter]
    private IModalService Modal { get; set; }
    
    
    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            try
            {
                sectors = await _sectorService.GetSectorsAsync();
                editedWorkshift = await _workShiftService.GetWorkShiftByIdAsync(Id.Value);
                sectorValue = editedWorkshift.Sector.Id.ToString();
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                paramet.Add(nameof(ErrorModal.Message),e.Message);
                _modalService.Show<ErrorModal>("Error",paramet);
            }
            StartTime = editedWorkshift.Start;
            EndTime = editedWorkshift.End;
            dayValue = editedWorkshift.DaysOfWeek.Split(", ");
            await FetchGuards(Id);
        }
        await base.OnParametersSetAsync();
    }
    
    private async Task EditWorkShift()
    {
        editedWorkshift.Start = StartTime;
        editedWorkshift.End = EndTime;
        editedWorkshift.Sector = sectors.First(s => s.Id == Int64.Parse(sectorValue));
        editedWorkshift.DaysOfWeek = string.Join(", ", dayValue);
        editedWorkshift.Guards = currentGuards;
        
        var parameters = new ModalParameters();
        parameters.Add(nameof(ActionConfirm.Message),"Are you sure you want to update the workshift?");
        var modalRef=_modalService.Show<ActionConfirm>("Success",parameters);
        var result = await modalRef.Result;
        try
        {
            if (!result.Cancelled)
            {
                await ClearGuards();
                await _workShiftService.UpdateWorkShiftAsync(editedWorkshift);
                _navMgr.NavigateTo("/WorkShiftsOverview");
            }
        }
        catch (Exception e)
        {
            parameters.Add(nameof(ActionConfirm.Message),e.Message);
            _modalService.Show<ActionConfirm>("Failure", parameters);
        }
    }
    
    private async Task DeleteWorkShift()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ActionConfirm.Message), "Are you sure you want to delete the workshift?");
        var modalRef = _modalService.Show<ActionConfirm>("Delete", parameters);
        var result = await modalRef.Result;
        if (!result.Cancelled)
        {
            try
            {
                await _workShiftService.RemoveWorkShiftAsync(editedWorkshift.Id);
                _navMgr.NavigateTo("/WorkshiftsOverview");
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                paramet.Add(nameof(ErrorModal.Message),e.Message);
                _modalService.Show<ErrorModal>("Error",paramet);
            }
        }
    }
    
    private async Task FetchGuards(long? workshiftID)
    {
        WorkShift currentWorkshift = await _workShiftService.GetWorkShiftByIdAsync(workshiftID);
        currentGuards = (List<Guard>) currentWorkshift.Guards;
        try
        {
            ICollection<WorkShift> tempWorkshifts = await _workShiftService.GetWorkShiftsAsync();
            ICollection<Guard> takenGuards = new List<Guard>();
            foreach (var workShift in tempWorkshifts)
            {
                if (workShift.Guards != null)
                {
                    foreach (var workShiftGuard in workShift.Guards)
                        takenGuards.Add(workShiftGuard);
                }
            }

            availableGuards = (List<Guard>) await _guardService.GetGuardsAsync(20);

            foreach (var takenGuard in takenGuards)
            {
                try
                {
                    if (availableGuards.Contains(availableGuards.Find(g => g.Id == takenGuard.Id))) 
                        availableGuards.Remove(availableGuards.Find(g => g.Id == takenGuard.Id));
                }
                catch (Exception e)
                {
                    var paramet = new ModalParameters();
                    paramet.Add(nameof(ErrorModal.Message),e.Message);
                    _modalService.Show<ErrorModal>("Error",paramet);
                }
            }
        }
        catch (Exception e)
        {
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            _modalService.Show<ErrorModal>("Error",paramet);
        }
    }
    
    // private async Task UpdateGuards()
    // {
    //     
    //     try
    //     {
    //         ICollection<WorkShift> tempWorkshifts = await _workShiftService.GetWorkShifts();
    //         ICollection<Guard> takenGuards = new List<Guard>();
    //         foreach (var workShift in tempWorkshifts)
    //         {
    //             if (workShift.Guards != null)
    //             {
    //                 foreach (var workShiftGuard in workShift.Guards)
    //                 {
    //                     if (workShift.Guards.)
    //                     {
    //                         
    //                     }
    //                 }
    //             }
    //         }
    //         foreach (var takenGuard in takenGuards)
    //         {
    //             try
    //             {
    //                 if (availableGuards.Contains(availableGuards.Find(g => g.Id == takenGuard.Id))) 
    //                     availableGuards.Remove(availableGuards.Find(g => g.Id == takenGuard.Id));
    //             }
    //             catch (Exception e)
    //             {
    //                 errorLabel = e.Message;
    //             }
    //         }
    //     }
    //     catch (Exception e)
    //     {
    //         errorLabel = e.Message;
    //     }
    // }
    
    private void OnButtonClick(int buttonIndex)
    {
        switch (buttonIndex)
        {
            case 1:
                currentGuards.ForEach(e => availableGuards.Add(e));
                currentGuards.ForEach(e => guardsToClear.Add(e));
                currentGuards.Clear();
                break;
            case 2:
                if (FirstSelected != null)
                {
                    availableGuards.Add(FirstSelected);
                    guardsToClear.Add(FirstSelected);
                    currentGuards.RemoveAt(currentGuards.FindIndex(e => e.Id == FirstSelected.Id));
                    FirstSelected = null;
                }
                break;
            case 3:
                if (SecondSelected != null)
                {
                    currentGuards.Add(SecondSelected);
                    availableGuards.RemoveAt(availableGuards.FindIndex(e => e.Id == SecondSelected.Id));
                    if(guardsToClear.Any())
                    guardsToClear.RemoveAt(guardsToClear.FindIndex(e => e.Id == SecondSelected.Id));
                    SecondSelected = null;
                }
                break;
            case 4:
                availableGuards.ForEach(e => currentGuards.Add(e));
                availableGuards.Clear();
                guardsToClear.Clear();
                break;
            default:
                break;
        }
    }

    private void OnSelected(ClickEventArgs<Guard> eventArgs, int listviewIndex)
    {
        if (listviewIndex == 1)
        {
            FirstSelected = eventArgs.ItemData;
        }
        else
        {
            SecondSelected = eventArgs.ItemData;
        }
    }

    private async Task ClearGuards()
    {
        foreach (var guard in guardsToClear)
        {
            try
            {
                await _workShiftService.RemoveGuardFromWorkShift(guard.Id.ToString(), editedWorkshift.Id.ToString());
            }
            catch (Exception e)
            {
                errorLabel = e.Message;
                Console.WriteLine($"Failed to remove guard id {guard.Id} from workshift id {editedWorkshift.Id}");
            }
        }
    }
    
    
    
    // todo fix modal fuckery

    

}


<style>
    .e-listview.e-lib {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
        width: 250px;
    }
    
    .header {
        font-weight: bold;
        font-size: larger;
        /*color: black;*/
    }

    .sample {
        justify-content: center;
        min-height: 280px;
    }

    .padding {
        padding: 4px;
        background: white;
    }

    .right__align {
        text-align: right;
        margin-right: 8px;
        padding-right: 8px;
    }

    .left__align {
        margin-left: 8px;
        padding-left: 8px;
    }

    .content__container {
        background-color: aliceblue;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .vertical__center {
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .flex__order__1 {
        order: 1;
    }

    .flex__order__2 {
        order: 2;
    }

    .flex__1 {
        flex: 1;
    }

    .flex__2 {
        flex: 2;
    }

    .flex__3 {
        flex: 3;
    }

    .flex__5 {
        flex: 5;
    }

    .flex__8 {
        flex: 8;
    }

    .bold {
        font-weight: 500;
    }

    .margin {
        margin: 10px;
    }

    .small__font {
        font-size: 13px;
        margin: 2px 0;
    }
</style>