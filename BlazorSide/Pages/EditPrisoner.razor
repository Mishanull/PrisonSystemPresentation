@page "/EditPrisoner/{PId:long}"
@using Entities
@using Contracts

@inject IPrisonerService _prisonerService
@inject NavigationManager _navMgr

<h3>EditPrisoner</h3>

<AuthorizeView>
    <NotAuthorized>
        <p>Log in first to see the content</p>
    </NotAuthorized>
    
    <Authorized>
        @if (_newPrisoner == null)
        {
            <p>Loading...</p>
            <p>[Failed to fetch prisoner]</p>
        }
        else
        {
            <div class="card">
                <h2>Edit prisoner:</h2>
                
                <div class="field">
                    <label style="text-align: center">SSN:</label>
                    <input type="number" @bind="_newPrisoner.Ssn"/>
                </div>

                <div class="field">
                    <label>First name:</label>
                    <input type="text" @bind="_newPrisoner.FirstName"/>
                </div>

                <div class="field">
                    <label style="text-align: center">Last name:</label>
                    <input type="text" @bind="_newPrisoner.LastName"/>
                </div>

                <div class="field">
                    <label style="text-align: center">Crime comitted:</label>
                    <input type="text" @bind="_newPrisoner.CrimeCommitted"/>
                </div>

                <div class="field">
                    <label style="text-align: center">Note:</label>
                    <input type="text" @bind="_newPrisoner.Note"/>
                </div>


                @if (!string.IsNullOrEmpty(_errorLabel))
                {
                    <div class="field">
                        <label style="color: red">
                            @_errorLabel
                        </label>
                    </div>
                }
                @if (!string.IsNullOrEmpty(_successLabel))
                {
                    <div class="field">
                        <label style="color: green">
                            @_successLabel
                        </label>
                    </div>
                }

                <div class="field">
                    <button class="btn btn-primary" @onclick="EditPrisonerAsync">Edit prisoner</button>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public long PId { get; set; }
    private string _errorLabel = "", _successLabel="";
    private Prisoner? _newPrisoner;

    protected override async Task OnInitializedAsync()
    {
        _newPrisoner = await _prisonerService.GetPrisonerByIdAsync(PId);
    }


    private async Task EditPrisonerAsync()
    {
        _errorLabel = "";
        _successLabel = "";
        
        if (_newPrisoner!.Ssn < 100)
        {
            _errorLabel += "-invalid SSN [<100???]!\n";
        }
        if (string.IsNullOrEmpty(_newPrisoner.FirstName))
        {
            _errorLabel += "-field 'First name' must not be empty!\n";
        }
        if (string.IsNullOrEmpty(_newPrisoner.LastName))
        {
            _errorLabel += "-field 'Last name' must not be empty!\n";
        }
        if (string.IsNullOrEmpty(_newPrisoner.CrimeCommitted))
        {
            _errorLabel += "-field 'Crime committed' must not be empty!\n";
        }
        if (string.IsNullOrEmpty(_newPrisoner.Note))
        {
            _newPrisoner.Note = "";
        }

        if (string.IsNullOrEmpty(_errorLabel))
        {
            try
            {
                await _prisonerService.UpdatePrisonerAsync(_newPrisoner);
                _navMgr.NavigateTo($"/PrisonerDetail/{PId}");
            }
            catch(Exception e){
                _errorLabel = e.Message;

            }
        }
    }
}
