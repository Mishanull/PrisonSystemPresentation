@page "/GuardProfile/{id:long}"

@inject IGuardService GuardService
@inject IModalService ModalService

@using Entities
@using Contracts
@using BlazorSide.UIComponents
@using Utilities

@attribute [Authorize(Policy = "GuardAccess")]

<div class="row">
    <div class="col-md-3">
        <div class="p-5 text-white mb-5  bg-info  " style="border-radius: 5px;">
            <h1 class="mb-3">Hello, @_loggedGuard.FirstName</h1>
            <h4 class="mb-3">This is your profile</h4>
        </div>
    </div>
    <div class="col-md-9">
        <div class="container-fluid">
            <EditForm Model="_loggedGuard" OnValidSubmit="ChangeGuardDetails">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="row">
                    <div class="col-md-6">
                        <label>Your First Name:</label>
                        <InputText @bind-Value="_loggedGuard.FirstName" class="form-control " type="text" readonly/>
                    </div>
                    <div class="col-md-6">
                        <label>Your Last Name:</label>
                        <InputText @bind-Value="_loggedGuard.LastName" class="form-control " type="text" readonly/>
                    </div>
                </div>
                <br/>
                <div class="row">
                    <div class="col-md-6">
                        <label>Your Username: </label>
                        <InputText @bind-Value="_loggedGuard.Username" class="form-control " type="text" readonly/>
                    </div>
                    <div class="col-md-6">
                        <label>Your Password:</label>
                        <InputText @bind-Value="_loggedGuard.Password" class="form-control " type="password" readonly/>
                    </div>
                </div>
                <br/>
                <div class="row">
                    <div class="col-md-6">
                        <label>Your Email: </label>
                        <InputText @bind-Value="_loggedGuard.Email" class="form-control " type="text"/>
                    </div>
                    <div class="col-md-6">
                        <label>Your Phone Number: </label>
                        <InputText @bind-Value="_loggedGuard.PhoneNumber" class="form-control " type="tel"/>
                    </div>
                </div>
                <br/>
                <button class="d-flex btn btn-primary " type="submit">Submit Changes</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public virtual long? Id { get; set; }
    private Guard _loggedGuard= new Guard();
    [CascadingParameter]
    private IModalService _modal { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _loggedGuard = await GuardService.GetGuardByIdAsync(Id.Value);
    }

    private async Task ChangeGuardDetails()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ActionConfirm.Message),"Are you sure you want to modify your personal information?");
        var modalRef=ModalService.Show<ActionConfirm>("Success",parameters);
        var result = await modalRef.Result;
        if (!result.Cancelled)
        {
            try
            {
                await GuardService.UpdateGuardAsync(_loggedGuard);
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                parameters.Add(nameof(ErrorModal.Message),e.Message);
                ModalService.Show<ErrorModal>("Error",paramet);
            }
        }
    }

    private string? _oldPassword, _newPassword;
    private async Task ChangeGuardPassword()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ActionConfirm.Message),"Are you sure you want to modify your password?");
        var modalRef=ModalService.Show<ActionConfirm>("Success",parameters);
        var result = await modalRef.Result;
        if (!result.Cancelled)
        {
            try
            {
                if (Security.VerifyPassword(_oldPassword, _loggedGuard.Password))
                {
                    if (!string.IsNullOrEmpty(_newPassword) && _newPassword.Length>6)
                    {
                        _loggedGuard.Password = _newPassword;
                        // await GuardService.UpdateGuardAsync(_loggedGuard);
                        await GuardService.ChangePasswordAsync(_loggedGuard);
                    }
                    else
                    {
                        _oldPassword = "";
                        _newPassword = "";
                        throw new Exception("New password must be at least 6-characters long.");
                    }
                }
                else
                {
                    _oldPassword = "";
                    _newPassword = "";
                    throw new Exception("Incorrect password.");
                }
            }
            catch (Exception e)
            {
                var paramet = new ModalParameters();
                parameters.Add(nameof(ErrorModal.Message),e.Message);
                ModalService.Show<ErrorModal>("Error",paramet);
            }
        }
    }
}