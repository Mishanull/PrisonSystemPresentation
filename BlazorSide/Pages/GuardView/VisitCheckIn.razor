@page "/VisitCheckIn"

@using Entities
@using Contracts
@using BlazorSide.UIComponents
@using Microsoft.AspNetCore.Components

@inject IVisitService VisitService
@inject IModalService ModalService
@inject IPrisonerService PrisonerService

<div class="row mt-5">
    <div class="col-md-4">
        <div class="card ">
            <h5 class="card-header bg-info text-white">Alert</h5>
            <div class="card-body">
                <h5 class="card-title ">Input the visitor's access code: </h5>
                <input @bind="_code" class="form-control " type="text" required/>
                <br/>
                <button class="btn btn-info" @onclick=@(() =>CheckAccessCode(_code) )>Check Access Code</button>
            </div>
        </div>
    </div>
    @if (_isChecked && _checkedVisit != null && _visitedPrisoner != null)
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <ul class="list-group  list-group-light">
                        <li class="list-group-item hover-shadow px-3">Visitor First Name: @_checkedVisit.FirstName</li>
                        <li class="list-group-item hover-shadow px-3">Visitor Last Name: @_checkedVisit.LastName</li>
                        <li class="list-group-item hover-shadow px-3">Prisoner to be visited: @_visitedPrisoner.FirstName @_visitedPrisoner.LastName</li>
                    </ul>
                    <div class="card-body text-danger">
                        <h4>REMEMBER: <br/> Check the visitor's identity before letting them in.<br/> Click the confirm button after doing so.</h4>
                        <br/>
                        <button class="btn btn-info" @onclick="ConfirmVisitor">Confirm Identity Check</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (!_visits!.Any() || _visits == null)
    {
    
    }
    else
    {
        @for (int i = _visits.ToList().Count - 1; i >= 0; i--)
        {
            Visit? visit = _visits.ToList()[i];
            <div class="col-md-8">
                <div class="d-flex flex-column col-md-7 align-items-center">
                    <div class="card text-center overflow-y-scroll" style="height: 30rem;">
                        <h5 class="card-header bg-info text-white">An Overview of Visit Requests</h5>
                        <table class="table table-hover  align-middle bg-white " style="position: relative; ">
                            <thead class="bg-info sticky-top">
                            <tr class="text-uppercase text-white ">
                                <th scope="col">Visitor Name </th>
                                <th scope="col">Time</th>
                                <th scope="col"></th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr >
                                <td >@visit.FirstName @visit.LastName
                                </td>
                                <td >@visit.VisitDate.TimeOfDay.ToString(@"hh\:mm")</td>

                                <td><button class="btn btn-outline-info" @onclick=@(() => CheckVisitorOut(visit))>Check visitor out</button></td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private string? _code { get; set; }
    private bool _isChecked;
    private Visit? _checkedVisit { get; set; } 
    private Prisoner? _visitedPrisoner { get; set; }
    private ICollection<Visit>? _visits { get; set; } = new List<Visit>();
    
    private async Task CheckAccessCode(string code)
    {
        try
        {
            _checkedVisit = await VisitService.GetAccessCodeConfirmationAsync(code);
            _visitedPrisoner = await PrisonerService.GetPrisonerBySsnAsync(_checkedVisit.PrisonerSsn.ToString());
            _isChecked = true;
        }
        catch (Exception e)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",parameters);
            _code=String.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ConfirmVisitor()
    {
        _visits.Add(_checkedVisit!);
        _isChecked = false;
        _code=String.Empty;
        _checkedVisit = null;
        _visitedPrisoner = null;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task CheckVisitorOut(Visit visit)
    {
        try
        {
            visit.Status = Status.Fulfilled;
            _visits!.Remove(visit);
            await VisitService.UpdateVisitStatusAsync(visit);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",parameters);
        }
    }
}