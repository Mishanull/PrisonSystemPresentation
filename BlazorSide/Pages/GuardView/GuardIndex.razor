@page "/GuardIndex"

@using StateContainer
@using BlazorSide.UIComponents
@using Contracts
@using Entities
@using Alert = Entities.Alert
@using System.Security.Claims

@inject AlertStateContainer AlertStateContainer
@inject IModalService ModalService
@inject IGuardService GuardService
@inject SectorStateContainer SectorStateContainer
@inject IUserService UserService

@if (IsAssigned(_currentGuardId))
{
    GetCurrentSector(_currentGuardId);
    <div class="row mt-5 justify-content-center">
        <div class="d-flex flex-column col-md-3 align-items-center align-self-center">
            <div class="card p-3">
                <h3 class="text-center">
                    Your sector is @_sector!.Id
                </h3>
                <br/>
            @if (_isWorkingToday)
            {
                <h3>
                    You are working today
                </h3>
                <br/>
            }
            else
            {
                <h3>
                    Working times:
                    From: @_currentWorkShift!.Start!.Value.TimeOfDay.ToString(@"hh\:mm")
                    To: @_currentWorkShift.End!.Value.TimeOfDay.ToString(@"hh\:mm")
                    Days: @_currentWorkShift.DaysOfWeek
                </h3>
                <br/>
            }
        </div>
        </div>
        @if (_colleagues != null && _colleagues.Any())
        {
            <div class="d-flex flex-column col-md-6 align-items-center">
                <div class="card text-center overflow-y-scroll" style="height: 30rem;">
                    <h5 class="card-header bg-info text-white">Your Colleagues on the shift</h5>
                    <table class="table table-hover align-middle mb-0 bg-white">
                        <thead class=" bg-info sticky-top">
                        <tr class="text-uppercase text-white">
                            <th scope="col">First name</th>
                            <th scope="col">Last name</th>
                            <th scope="col">Username</th>
                            <th scope="col">Email</th>
                            <th scope="col">Sector</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var g in _colleagues)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img
                                            src="img/officer.jpg"
                                            class="rounded-circle"
                                            alt=""
                                            style="width: 45px; height: 45px"/>
                                        <div class="ms-3">
                                            <p class="fw-bold mb-1">@g.FirstName</p>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="ms-3">
                                            <p class=" mb-1">@g.LastName</p>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="ms-3">
                                            <p class=" mb-1">@g.Username</p>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="ms-3">
                                            <p class=" mb-1">@g.Email</p>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="ms-3">

                                            <p class=" mb-1">@_sector!.Id</p>

                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}
else
{
    <h1>You are not assigned to any sector. Refer to the warden.</h1>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }
    private Alert? _alert { get; set; }
    public string _text { get; set; }
    public Sector? _sector { get; set; }
    private ClaimsPrincipal? _user;
    private long _currentGuardId;
    private ICollection<Guard>? _colleagues { get; set; }
    private  WorkShift? _currentWorkShift { get; set; }
    private bool _isWorkingToday;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await _authState;
            _user = authState.User;
            Claim userName = _user.Claims.First(c => c.Type.Equals("UserName"));
            User? u = await UserService.GetUserAsync(userName.Value);
            AlertStateContainer.OnChange += ShowModal;
            _currentGuardId = u.Id;
            _sector = await GuardService.GetGuardSector(u.Id);
            SectorStateContainer.Property = _sector;
            _isWorkingToday =await GuardService.IsGuardWorking(_currentGuardId);
            _colleagues = await GuardService.GetGuardsBySector(_sector!.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            var paramet = new ModalParameters();
            paramet.Add(nameof(ErrorModal.Message),e.Message);
            ModalService.Show<ErrorModal>("Error",paramet);
        }
    }

    private void ShowModal()
    {
        var parameters = new ModalParameters();
        _alert = AlertStateContainer.Property;
        _text = _alert.Text;
        parameters.Add(nameof(AlertModal.Message),_alert?.Text);
        parameters.Add(nameof(AlertModal.dateTime),_alert?.DateTime);
        parameters.Add(nameof(AlertModal.duration),_alert?.DurationInMinutes);
        ModalService.Show<AlertModal>("Alert", parameters);
    }

    private bool IsAssigned(long guardId)
    {
        return GuardService.IsGuardAssigned(guardId).Result;
    }

    private void GetCurrentSector(long guardId)
    {
        _sector= GuardService.GetGuardSector( guardId).Result;
    }
}