@page "/PrisonerDetail/{pId:long}"

@using Entities
@using Contracts

@inject NavigationManager _navMgr
@inject IPrisonerService _prisonerService

<h3>PrisonerDetail</h3>

<div>
    @if (!string.IsNullOrEmpty(_errorLabel))
    {
        <div class="field">
            <label style="color: red">
                @_errorLabel
            </label>
        </div>
    }

    @if (_prisoner == null)
    {
        <p>failed to fetch data of prisoner n.@PId</p>
        StateHasChanged();
    }
    else
    {
        <p>prisoner n.: @_prisoner.Id</p>
        <p>name: @_prisoner.FirstName @_prisoner.LastName</p>
        <p>note: @_prisoner.Note</p>
        <p>ToDo ...</p>
                
        <button @onclick="EditPrisoner">Edit</button>
        <button @onclick="DeletePrisoner">Delete</button>
    }
</div>


@code {
    [Parameter]
    public long PId { get; set; }
    private Prisoner? _prisoner;

    private string _errorLabel="";

    protected override async Task OnInitializedAsync()
    {
        _prisoner = await _prisonerService.GetPrisonerByIdAsync(PId);
    }

    private void EditPrisoner()
    {
        if (_prisoner == null)
        {
            _errorLabel = "unable to edit prisoner's data";
        }
        else
        {
            _navMgr.NavigateTo($"/EditPrisoner/{_prisoner.Id}");
        }
    }

    private async Task DeletePrisoner()
    {
        if (_prisoner == null)
        {
            _errorLabel = "unable to retrieve prisoner data";
        }
        else
        {
            try
            {
                await _prisonerService.RemovePrisonerAsync(PId);
                _navMgr.NavigateTo("/PrisonersOverview");
            }
            catch (Exception e)
            {
                _errorLabel = e.Message;
            }
        }
    }
}